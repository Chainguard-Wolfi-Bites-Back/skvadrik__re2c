supported_apis = ["record", "generic"];
supported_api_styles = ["free-form"];
supported_code_models = ["recursive_functions"];
supported_targets = ["code", "dot"];
supported_features = ["nested_ifs", "monadic"];

semicolons = 1;
//semicolons = 0;
implicit_bool_conversion = 0;
backtick_quoted_strings = 0;
standalone_single_quotes = 1; // TODO: what about identifiers?
indentation_sensitive = 1;
wrap_blocks_in_braces = 0;

conf:api = record;
conf:api:style = free-form;
conf:api:sigil = "@@";
conf:define:YYGETCOND:naked = 0;
conf:define:YYSETCOND:naked = 0;
conf:define:YYSETCOND@cond = "@@";
conf:define:YYGETSTATE:naked = 0;
conf:define:YYSETSTATE:naked = 0;
conf:define:YYSETSTATE@state = "@@";
conf:define:YYFILL@len = "@@";
conf:define:YYFILL:naked = 0;
conf:define:YYFN = ["<undefined-function-name>;<undefined-function-type>"];
conf:yyfn:sep = ";";
conf:variable:yycond = "yycond";
conf:variable:yyctable = "yyctable";
conf:variable:yyaccept = "yyaccept";
conf:variable:yytarget = "yytarget";
conf:variable:yystate = "yystate";
conf:variable:yynmatch = ""; // no array for `yypmatch` in Haskell => no need for `yynmatch`
conf:variable:yypmatch = "yypmatch";
conf:variable:yyrecord = "yyrecord";
conf:variable:yych = "yych";
conf:variable:yych:conversion = 0;
conf:variable:yych:literals = hex;
conf:variable:yych:emit = (code_model.recursive_functions ? 0 : 1);
conf:variable:yybm = "yybm";
conf:variable:yybm:hex = 0;
conf:variable:yyfill = "yyfill";
conf:variable:yystable = ""; // deprecated
conf:header = "";
conf:eof = -1;
conf:sentinel = -1;
conf:yyfill:enable = 1;
conf:yyfill:parameter = 1;
conf:yyfill:check = 1;
conf:tags = 0;
conf:leftmost-captures = 0;
conf:posix-captures = 0;
conf:tags:prefix = "_yyt";
conf:invert-captures = 0;
conf:cond:abort = 1;
conf:cond:prefix = "yyc_";
conf:cond:enumprefix = "YYC_";
conf:cond:divider@cond = "@@";
conf:cond:goto@cond = "@@";
conf:state:abort = 1;
conf:state:nextlabel = 0;
conf:bit-vectors = 0;
conf:debug-output = 0;
conf:computed-gotos = 0;
conf:computed-gotos:threshold = 9;
conf:nested-ifs = 0;
conf:case-insensitive = 0;
conf:case-inverted = 0;
conf:case-ranges = 0;
conf:unsafe = 0;
conf:monadic = 0;
conf:encoding:ebcdic = 0;
conf:encoding:utf32 = 0;
conf:encoding:ucs2 = 0;
conf:encoding:utf16 = 0;
conf:encoding:utf8 = 0;
conf:encoding-policy = ignore;
conf:empty-class = match-empty;
conf:indent:string = "    ";
conf:indent:top = 0;
conf:label:prefix = "yy";
conf:label:yyfill = "yyFillLabel";
conf:label:yyloop = "";
conf:label:yyNext = "yyNext";
conf:label:start = 0;

conf:define:YYBACKUP = "yybackup";
conf:define:YYBACKUPCTX = "yybackupctx";
conf:define:YYCONDTYPE = "YYCONDTYPE";
conf:define:YYCOPYMTAG = "yycopymtag";
conf:define:YYCOPYSTAG = "yycopystag";
conf:define:YYCTYPE = "YYCTYPE";
conf:define:YYCTXMARKER = "yyctxmarker";
conf:define:YYCURSOR = "yycursor";
conf:define:YYDEBUG = "yydebug";
conf:define:YYFILL = "yyfill";
conf:define:YYGETACCEPT = "yygetaccept";
conf:define:YYGETCOND = "yygetcond";
conf:define:YYGETSTATE = "yygetstate";
conf:define:YYLESSTHAN = "yylessthan";
conf:define:YYLIMIT = "yylimit";
conf:define:YYMARKER = "YYMARKER";
conf:define:YYMAXFILL = "yymaxfill";
conf:define:YYMAXNMATCH = "yymaxnmatch";
conf:define:YYMTAGN = "yymtagn";
conf:define:YYMTAGP = "yymtagp";
conf:define:YYPEEK = (api.record ? "index" : "yypeek");
conf:define:YYRESTORE = "yyrestore";
conf:define:YYRESTORECTX = "yyrestorectx";
conf:define:YYRESTORETAG = "yyrestoretag";
conf:define:YYSETACCEPT = "yysetaccept";
conf:define:YYSETCOND = "yysetcond";
conf:define:YYSETSTATE = "yysetstate";
conf:define:YYSHIFT = "yyshift";
conf:define:YYSHIFTSTAG = "yyshiftstag";
conf:define:YYSHIFTMTAG = "yyshiftmtag";
conf:define:YYSKIP = "yyskip";
conf:define:YYSTAGN = "yystagn";
conf:define:YYSTAGP = "yystagp";
conf:tags:expression = sigil;
conf:cond:divider = "";
conf:cond:goto = "";

code:var_local = topindent "let " name " = " init " in" nl;
code:var_global = topindent "let " name " = " init nl;

code:const_local = topindent "let " name " = " init " in" nl;
code:const_global = topindent name " = " init nl;

// code:array_local
// code:array_global

// `code:array_elem` is used to generate operations on POSIX `yypmatch` array.
// Override it to generate an identifier instead, as mutable arrays are non-idiomatic in Haskell.
code:array_elem = array index;

code:type_int = "int";
code:type_uint = "uint";
code:type_cond_enum = (storable_state? "int" : "uint");
// code:type_yybm
// code:type_yytarget

// code:assign

code:if_then_else =
    [branch{0}: topindent (many ? "if " cond " then" : "when (" cond ") $") (monadic ? " do") nl
        indent [stmt: stmt] dedent]
    [branch{1:-1}: topindent "else" (have_cond? " if " cond " then") (monadic ? " do") nl
        indent [stmt: stmt] dedent];

code:if_then_else_oneline =
    [branch{0}: topindent (many ? "if " cond " then " : "when (" cond ") $ ") [stmt: stmt] nl]
    [branch{1:-1}: topindent "else " (have_cond? "if " cond " then ") [stmt: stmt] nl];

code:switch =
    topindent "case " expr " of" nl
        indent [case: case] dedent;

code:switch_cases = topindent "_c | "
    [case{0:-2}: case " || "]
    [case{-1}:   case " ->" (monadic ? " do") nl
        indent [stmt: stmt] dedent
    ];

code:switch_case_range = (many
    ? [val{0}: val] " <= _c && _c <= " [val{-1}: val]
    : [val{0}: val] " == _c");

code:switch_case_default = "True";

code:enum =
    "data " name " = "
        [elem{0:-2}: elem " | "]
        [elem{-1}: elem] " deriving (Eq, Show)"
    nl;

code:enum_elem = name;

code:fndef =
    name " :: " [arg: argtype " -> "] type nl
    name [arg: " " argname] " =" (monadic ? " do") nl
        indent [stmt: stmt] dedent;

code:fncall =
    topindent (have_retval ? "let " retval " = ")
        name (have_args ? [arg: " " arg] : " ()") nl;

code:tailcall = topindent name (have_args ? [arg: " " arg] : " ()") nl;

code:recursive_functions = [fn: fndef nl];

code:fingerprint =
    "-- Generated by re2c" (version? " " version) (date? " on " date) nl
    (api.record ? "{-# LANGUAGE RecordWildCards #-}" nl);

code:line_info = "#" line " \"" file "\"" nl;

code:abort = topindent "error \"internal lexer error\"" nl;

code:yydebug = topindent debug nl;

code:yypeek =
    topindent (api.record
        ? (monadic
            ? char " <- return $ " peek " _str _cur"
            : "let " char " = " peek " _str _cur in")
        : (monadic
            ? char " <- " peek
            : "let " char " = " peek " in")
    ) nl;

code:yyskip =
    topindent (api.record
        ? (monadic
            ? "_cur <- return $ _cur + 1"
            : "let __ = _cur + 1 in let _cur = __ in")
        : skip
    ) nl;

code:yybackup =
    topindent (api.record
        ? (monadic
            ? "let _mar = _cur"
            : "let _mar = _cur in")
        : backup
    ) nl;

code:yybackupctx =
    topindent (api.record
        ? (monadic
            ? "let _ctx = _cur"
            : "let _ctx = _cur in")
        : backupctx
    ) nl;

code:yyrestore =
    topindent (api.record
        ? (monadic
            ? "let _cur = _mar"
            : "let _cur = _mar in")
        : restore
    ) nl;

code:yyrestorectx =
    topindent (api.record
        ? (monadic
            ? "let _cur = _ctx"
            : "let _cur = _ctx in")
        : restorectx
    ) nl;

code:yyrestoretag =
    topindent (api.record
        ? (monadic
            ? "let _cur = " tag
            : "let _cur = " tag " in")
        : restoretag
    ) nl;

code:yyshift =
    topindent (api.record
        ? (monadic
            ? "_cur <- return $ _cur - " offset
            : "let __ = _cur - " offset " in let _cur = __ in")
        : shift
    ) nl;

code:yyshiftstag =
    topindent (api.record
        ? (monadic
            ? tag " <- return $ if " tag " == (-1) then (-1) else " tag " - " offset
            :         "let __ = if " tag " == (-1) then (-1) else " tag " - " offset
                " in let " tag " = __ in")
        : shiftstag
    ) nl;

code:yyshiftmtag = topindent shiftmtag nl;

code:yystagp =
    topindent (api.record
        ? (monadic
            ? "let " tag " = _cur"
            : "let " tag " = _cur in")
        : stagp
    ) nl;

code:yymtagp = topindent mtagp nl;

code:yystagn =
    topindent (api.record
        ? (monadic
            ? "let " tag " = (-1)"
            : "let " tag " = (-1) in")
        : stagn
    ) nl;

code:yymtagn = topindent mtagn nl;

code:yycopystag =
    topindent (api.record
        ? (monadic
            ? "let " lhs " = " rhs
            : "let " lhs " = " rhs " in")
        : copystag
    ) nl;

code:yycopymtag =
    topindent (api.record
        ? (monadic
            ? "let " lhs " = " rhs
            : "let " lhs " = " rhs " in")
        : copymtag
    ) nl;

code:yygetaccept = (api.record ? "_accept" : getaccept);

code:yysetaccept =
    topindent (api.record
        ? (monadic
            ? "let _accept = " val
            : "let _accept = " val " in")
        : setaccept
    ) nl;

code:yygetcond = (api.record ? "_cond" : getcond);

code:yysetcond =
    topindent (api.record
        ? (monadic
            ? "let _cond = " cond
            : "let _cond = " cond " in")
        : setcond
    ) nl;

code:yygetstate = (api.record ? "_state" : getstate);

code:yysetstate =
    topindent (api.record
        ? (monadic
            ? "let _state = " state
            : "let _state = " state " in")
        : setstate
    ) nl;

code:yylessthan =
    (api.record
        ? "_cur >= _lim" // YYFILL check can only be used with EOF rule $
        : lessthan);
