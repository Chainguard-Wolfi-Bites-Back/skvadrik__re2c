/* Generated by re2c 3.0 */
#line 1 "../src/parse/lexer.re"
#include <ctype.h>
#include <stdint.h>
#include <limits>
#include <string>
#include <utility>
#include <vector>

#include "src/codegen/helpers.h"
#include "src/codegen/output.h"
#include "src/encoding/enc.h"
#include "src/msg/location.h"
#include "src/msg/msg.h"
#include "src/msg/warn.h"
#include "src/options/opt.h"
#include "src/parse/ast.h"
#include "src/parse/input.h"
#include "src/parse/lexer.h"
#include "src/regexp/rule.h"
#include "src/util/check.h"
#include "src/util/string_utils.h"
#include "parser.h"

namespace re2c {

#line 28 "src/parse/lexer.cc"
size_t LexerState::maxfill_main() { return 18; }
#line 25 "../src/parse/lexer.re"


// Global re2c configurations and definitions.
#line 60 "../src/parse/lexer.re"


#line 132 "../src/parse/lexer.re"


#define RET_BLOCK(k) do { kind = k; return Ret::OK; } while(0)

Ret Input::lex_program(Output& out, std::string& block_name, InputBlock& kind) {
    const opt_t* opts = out.block().opts;
    const uint8_t* x, *y;

    if (is_eof()) RET_BLOCK(InputBlock::END);

next:
    tok = cur;
loop:
    location = cur_loc();
    ptr = cur;

#line 54 "src/parse/lexer.cc"
{
	uint8_t yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 160,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((lim - cur) < 18) if (!fill(18)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych >= 0x01) goto yy1;
		} else {
			if (yych <= '\n') goto yy3;
			if (yych <= '\f') goto yy1;
			goto yy5;
		}
	} else {
		if (yych <= '%') {
			if (yych <= '$') goto yy1;
			goto yy6;
		} else {
			if (yych == '/') goto yy7;
			goto yy1;
		}
	}
	++cur;
#line 262 "../src/parse/lexer.re"
	{
        if (is_eof()) {
            out.gen_raw(tok, ptr);
            RET_BLOCK(InputBlock::END);
        }
        goto loop;
    }
#line 120 "src/parse/lexer.cc"
yy1:
	++cur;
yy2:
#line 282 "../src/parse/lexer.re"
	{ goto loop; }
#line 126 "src/parse/lexer.cc"
yy3:
	yyaccept = 0;
	yych = *(mar = ++cur);
	if (yybm[0+yych] & 32) {
		goto yy8;
	}
	if (yych == '#') goto yy10;
yy4:
#line 277 "../src/parse/lexer.re"
	{
        next_line();
        goto loop;
    }
#line 140 "src/parse/lexer.cc"
yy5:
	yych = *++cur;
	if (yych == '\n') goto yy3;
	goto yy2;
yy6:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych == '{') goto yy11;
	goto yy2;
yy7:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych == '*') goto yy12;
	goto yy2;
yy8:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 32) {
		goto yy8;
	}
	if (yych == '#') goto yy10;
yy9:
	cur = mar;
	if (yyaccept <= 2) {
		if (yyaccept <= 1) {
			if (yyaccept == 0) {
				goto yy4;
			} else {
				goto yy2;
			}
		} else {
			goto yy56;
		}
	} else {
		if (yyaccept <= 4) {
			if (yyaccept == 3) {
				goto yy128;
			} else {
				goto yy130;
			}
		} else {
			goto yy156;
		}
	}
yy10:
	++cur;
	if ((lim - cur) < 5) if (!fill(5)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy10;
		goto yy9;
	} else {
		if (yych <= ' ') goto yy10;
		if (yych == 'l') goto yy13;
		goto yy9;
	}
yy11:
	yych = *++cur;
	if (yych <= 'h') {
		if (yych <= '\r') {
			if (yych == '\n') {
				yyt1 = cur;
				goto yy14;
			}
			if (yych <= '\f') goto yy9;
			yyt1 = cur;
			goto yy15;
		} else {
			if (yych <= 'c') {
				if (yych <= 'b') goto yy9;
				goto yy16;
			} else {
				if (yych <= 'f') goto yy9;
				if (yych <= 'g') goto yy17;
				goto yy18;
			}
		}
	} else {
		if (yych <= 'q') {
			if (yych <= 'k') {
				if (yych <= 'i') goto yy19;
				goto yy9;
			} else {
				if (yych <= 'l') goto yy20;
				if (yych <= 'm') goto yy21;
				goto yy9;
			}
		} else {
			if (yych <= 's') {
				if (yych <= 'r') goto yy22;
				goto yy23;
			} else {
				if (yych == 'u') goto yy24;
				goto yy9;
			}
		}
	}
yy12:
	yych = *++cur;
	if (yych == '!') goto yy25;
	goto yy9;
yy13:
	yych = *++cur;
	if (yych == 'i') goto yy26;
	goto yy9;
yy14:
	++cur;
	cur = yyt1;
#line 148 "../src/parse/lexer.re"
	{
        out.gen_raw(tok, ptr);
        CHECK_RET(lex_opt_name(block_name));
        RET_BLOCK(InputBlock::GLOBAL);
    }
#line 256 "src/parse/lexer.cc"
yy15:
	yych = *++cur;
	if (yych == '\n') goto yy14;
	goto yy9;
yy16:
	yych = *++cur;
	if (yych == 'o') goto yy27;
	goto yy9;
yy17:
	yych = *++cur;
	if (yych == 'e') goto yy28;
	goto yy9;
yy18:
	yych = *++cur;
	if (yych == 'e') goto yy29;
	goto yy9;
yy19:
	yych = *++cur;
	if (yych == 'g') goto yy30;
	if (yych == 'n') goto yy31;
	goto yy9;
yy20:
	yych = *++cur;
	if (yych == 'o') goto yy32;
	goto yy9;
yy21:
	yych = *++cur;
	if (yych == 'a') goto yy33;
	if (yych == 't') goto yy34;
	goto yy9;
yy22:
	yych = *++cur;
	if (yych == 'u') goto yy35;
	goto yy9;
yy23:
	yych = *++cur;
	if (yych == 't') goto yy36;
	goto yy9;
yy24:
	yych = *++cur;
	if (yych == 's') goto yy37;
	goto yy9;
yy25:
	yych = *++cur;
	switch (yych) {
		case 'c': goto yy38;
		case 'g': goto yy39;
		case 'h': goto yy40;
		case 'i': goto yy41;
		case 'l': goto yy42;
		case 'm': goto yy43;
		case 'r': goto yy44;
		case 's': goto yy45;
		case 't': goto yy46;
		case 'u': goto yy47;
		default: goto yy9;
	}
yy26:
	yych = *++cur;
	if (yych == 'n') goto yy48;
	goto yy9;
yy27:
	yych = *++cur;
	if (yych == 'n') goto yy49;
	goto yy9;
yy28:
	yych = *++cur;
	if (yych == 't') goto yy50;
	goto yy9;
yy29:
	yych = *++cur;
	if (yych == 'a') goto yy51;
	goto yy9;
yy30:
	yych = *++cur;
	if (yych == 'n') goto yy52;
	goto yy9;
yy31:
	yych = *++cur;
	if (yych == 'c') goto yy53;
	goto yy9;
yy32:
	yych = *++cur;
	if (yych == 'c') goto yy54;
	goto yy9;
yy33:
	yych = *++cur;
	if (yych == 'x') goto yy55;
	goto yy9;
yy34:
	yych = *++cur;
	if (yych == 'a') goto yy57;
	goto yy9;
yy35:
	yych = *++cur;
	if (yych == 'l') goto yy58;
	goto yy9;
yy36:
	yych = *++cur;
	if (yych == 'a') goto yy59;
	goto yy9;
yy37:
	yych = *++cur;
	if (yych == 'e') goto yy60;
	goto yy9;
yy38:
	yych = *++cur;
	if (yych == 'o') goto yy61;
	goto yy9;
yy39:
	yych = *++cur;
	if (yych == 'e') goto yy62;
	goto yy9;
yy40:
	yych = *++cur;
	if (yych == 'e') goto yy63;
	goto yy9;
yy41:
	yych = *++cur;
	if (yych == 'g') goto yy64;
	if (yych == 'n') goto yy65;
	goto yy9;
yy42:
	yych = *++cur;
	if (yych == 'o') goto yy66;
	goto yy9;
yy43:
	yych = *++cur;
	if (yych == 'a') goto yy67;
	if (yych == 't') goto yy68;
	goto yy9;
yy44:
	yych = *++cur;
	if (yych == 'e') goto yy69;
	if (yych == 'u') goto yy70;
	goto yy9;
yy45:
	yych = *++cur;
	if (yych == 't') goto yy71;
	goto yy9;
yy46:
	yych = *++cur;
	if (yych == 'y') goto yy72;
	goto yy9;
yy47:
	yych = *++cur;
	if (yych == 's') goto yy73;
	goto yy9;
yy48:
	yych = *++cur;
	if (yych == 'e') goto yy74;
	goto yy9;
yy49:
	yych = *++cur;
	if (yych == 'd') goto yy75;
	goto yy9;
yy50:
	yych = *++cur;
	if (yych == 's') goto yy76;
	goto yy9;
yy51:
	yych = *++cur;
	if (yych == 'd') goto yy77;
	goto yy9;
yy52:
	yych = *++cur;
	if (yych == 'o') goto yy78;
	goto yy9;
yy53:
	yych = *++cur;
	if (yych == 'l') goto yy79;
	goto yy9;
yy54:
	yych = *++cur;
	if (yych == 'a') goto yy80;
	goto yy9;
yy55:
	yyaccept = 2;
	yych = *(mar = ++cur);
	if (yych == 'n') goto yy81;
yy56:
#line 178 "../src/parse/lexer.re"
	{
        CHECK_RET(lex_special_block(out, CodeKind::MAXFILL, DCONF_FORMAT));
        goto next;
    }
#line 443 "src/parse/lexer.cc"
yy57:
	yych = *++cur;
	if (yych == 'g') goto yy82;
	goto yy9;
yy58:
	yych = *++cur;
	if (yych == 'e') goto yy83;
	goto yy9;
yy59:
	yych = *++cur;
	if (yych == 'g') goto yy84;
	goto yy9;
yy60:
	++cur;
#line 172 "../src/parse/lexer.re"
	{
        out.gen_raw(tok, ptr);
        CHECK_RET(lex_opt_name(block_name));
        RET_BLOCK(InputBlock::USE);
    }
#line 464 "src/parse/lexer.cc"
yy61:
	yych = *++cur;
	if (yych == 'n') goto yy85;
	goto yy9;
yy62:
	yych = *++cur;
	if (yych == 't') goto yy86;
	goto yy9;
yy63:
	yych = *++cur;
	if (yych == 'a') goto yy87;
	goto yy9;
yy64:
	yych = *++cur;
	if (yych == 'n') goto yy88;
	goto yy9;
yy65:
	yych = *++cur;
	if (yych == 'c') goto yy89;
	goto yy9;
yy66:
	yych = *++cur;
	if (yych == 'c') goto yy90;
	goto yy9;
yy67:
	yych = *++cur;
	if (yych == 'x') goto yy91;
	goto yy9;
yy68:
	yych = *++cur;
	if (yych == 'a') goto yy92;
	goto yy9;
yy69:
	yych = *++cur;
	if (yych == '2') goto yy93;
	goto yy9;
yy70:
	yych = *++cur;
	if (yych == 'l') goto yy94;
	goto yy9;
yy71:
	yych = *++cur;
	if (yych == 'a') goto yy95;
	goto yy9;
yy72:
	yych = *++cur;
	if (yych == 'p') goto yy96;
	goto yy9;
yy73:
	yych = *++cur;
	if (yych == 'e') goto yy97;
	goto yy9;
yy74:
	yych = *++cur;
	if (yych <= '0') goto yy99;
	if (yych <= '9') goto yy9;
	goto yy99;
yy75:
	yych = *++cur;
	if (yych == 'i') goto yy100;
	goto yy9;
yy76:
	yych = *++cur;
	if (yych == 't') goto yy101;
	goto yy9;
yy77:
	yych = *++cur;
	if (yych == 'e') goto yy102;
	goto yy9;
yy78:
	yych = *++cur;
	if (yych == 'r') goto yy103;
	goto yy9;
yy79:
	yych = *++cur;
	if (yych == 'u') goto yy104;
	goto yy9;
yy80:
	yych = *++cur;
	if (yych == 'l') goto yy105;
	goto yy9;
yy81:
	yych = *++cur;
	if (yych == 'm') goto yy106;
	goto yy9;
yy82:
	yych = *++cur;
	if (yych == 's') goto yy107;
	goto yy9;
yy83:
	yych = *++cur;
	if (yych == 's') goto yy108;
	goto yy9;
yy84:
	yych = *++cur;
	if (yych == 's') goto yy109;
	goto yy9;
yy85:
	yych = *++cur;
	if (yych == 'd') goto yy110;
	goto yy9;
yy86:
	yych = *++cur;
	if (yych == 's') goto yy111;
	goto yy9;
yy87:
	yych = *++cur;
	if (yych == 'd') goto yy112;
	goto yy9;
yy88:
	yych = *++cur;
	if (yych == 'o') goto yy113;
	goto yy9;
yy89:
	yych = *++cur;
	if (yych == 'l') goto yy114;
	goto yy9;
yy90:
	yych = *++cur;
	if (yych == 'a') goto yy115;
	goto yy9;
yy91:
	yych = *++cur;
	if (yych == ':') goto yy116;
	if (yych == 'n') goto yy117;
	goto yy9;
yy92:
	yych = *++cur;
	if (yych == 'g') goto yy118;
	goto yy9;
yy93:
	yych = *++cur;
	if (yych == 'c') goto yy119;
	goto yy9;
yy94:
	yych = *++cur;
	if (yych == 'e') goto yy120;
	goto yy9;
yy95:
	yych = *++cur;
	if (yych == 'g') goto yy121;
	goto yy9;
yy96:
	yych = *++cur;
	if (yych == 'e') goto yy122;
	goto yy9;
yy97:
	yych = *++cur;
	if (yych == ':') goto yy123;
	goto yy9;
yy98:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
yy99:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy98;
		goto yy9;
	} else {
		if (yych <= ' ') goto yy98;
		if (yych <= '0') goto yy9;
		if (yych <= '9') {
			yyt1 = cur;
			goto yy124;
		}
		goto yy9;
	}
yy100:
	yych = *++cur;
	if (yych == 't') goto yy125;
	goto yy9;
yy101:
	yych = *++cur;
	if (yych == 'a') goto yy126;
	goto yy9;
yy102:
	yych = *++cur;
	if (yych == 'r') goto yy127;
	goto yy9;
yy103:
	yych = *++cur;
	if (yych == 'e') goto yy129;
	goto yy9;
yy104:
	yych = *++cur;
	if (yych == 'd') goto yy131;
	goto yy9;
yy105:
	++cur;
#line 160 "../src/parse/lexer.re"
	{
        out.gen_raw(tok, ptr);
        CHECK_RET(lex_opt_name(block_name));
        RET_BLOCK(InputBlock::LOCAL);
    }
#line 660 "src/parse/lexer.cc"
yy106:
	yych = *++cur;
	if (yych == 'a') goto yy132;
	goto yy9;
yy107:
	++cur;
#line 194 "../src/parse/lexer.re"
	{
        uint32_t allow = DCONF_FORMAT | DCONF_SEPARATOR;
        CHECK_RET(lex_special_block(out, CodeKind::MTAGS, allow));
        goto next;
    }
#line 673 "src/parse/lexer.cc"
yy108:
	++cur;
#line 166 "../src/parse/lexer.re"
	{
        out.gen_raw(tok, ptr);
        CHECK_RET(lex_opt_name(block_name));
        RET_BLOCK(InputBlock::RULES);
    }
#line 682 "src/parse/lexer.cc"
yy109:
	++cur;
#line 188 "../src/parse/lexer.re"
	{
        uint32_t allow = DCONF_FORMAT | DCONF_SEPARATOR;
        CHECK_RET(lex_special_block(out, CodeKind::STAGS, allow));
        goto next;
    }
#line 691 "src/parse/lexer.cc"
yy110:
	yych = *++cur;
	if (yych == 'i') goto yy133;
	goto yy9;
yy111:
	yych = *++cur;
	if (yych == 't') goto yy134;
	goto yy9;
yy112:
	yych = *++cur;
	if (yych == 'e') goto yy135;
	goto yy9;
yy113:
	yych = *++cur;
	if (yych == 'r') goto yy136;
	goto yy9;
yy114:
	yych = *++cur;
	if (yych == 'u') goto yy137;
	goto yy9;
yy115:
	yych = *++cur;
	if (yych == 'l') goto yy138;
	goto yy9;
yy116:
	yych = *++cur;
	if (yych == 'r') goto yy139;
	goto yy9;
yy117:
	yych = *++cur;
	if (yych == 'm') goto yy140;
	goto yy9;
yy118:
	yych = *++cur;
	if (yych == 's') goto yy141;
	goto yy9;
yy119:
	++cur;
#line 154 "../src/parse/lexer.re"
	{
        out.gen_raw(tok, ptr);
        CHECK_RET(lex_opt_name(block_name));
        RET_BLOCK(InputBlock::GLOBAL);
    }
#line 736 "src/parse/lexer.cc"
yy120:
	yych = *++cur;
	if (yych == 's') goto yy142;
	goto yy9;
yy121:
	yych = *++cur;
	if (yych == 's') goto yy143;
	goto yy9;
yy122:
	yych = *++cur;
	if (yych == 's') goto yy144;
	goto yy9;
yy123:
	yych = *++cur;
	if (yych == 'r') goto yy145;
	goto yy9;
yy124:
	++cur;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 64) {
		goto yy124;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy9;
		if (yych <= '\t') goto yy146;
		if (yych <= '\n') goto yy147;
		goto yy9;
	} else {
		if (yych <= '\r') goto yy148;
		if (yych == ' ') goto yy146;
		goto yy9;
	}
yy125:
	yych = *++cur;
	if (yych == 'i') goto yy149;
	goto yy9;
yy126:
	yych = *++cur;
	if (yych == 't') goto yy150;
	goto yy9;
yy127:
	yyaccept = 3;
	yych = *(mar = ++cur);
	if (yych == ':') goto yy151;
yy128:
#line 236 "../src/parse/lexer.re"
	{
        RET_FAIL(error_at_cur("ill-formed `header` directive: expected `:on` or `:off`"));
    }
#line 787 "src/parse/lexer.cc"
yy129:
	yyaccept = 4;
	yych = *(mar = ++cur);
	if (yych <= 0x1F) {
		if (yych <= '\n') {
			if (yych >= '\t') {
				yyt1 = cur;
				goto yy152;
			}
		} else {
			if (yych == '\r') {
				yyt1 = cur;
				goto yy152;
			}
		}
	} else {
		if (yych <= '%') {
			if (yych <= ' ') {
				yyt1 = cur;
				goto yy152;
			}
			if (yych >= '%') {
				yyt1 = cur;
				goto yy153;
			}
		} else {
			if (yych == '*') {
				yyt1 = cur;
				goto yy154;
			}
		}
	}
yy130:
#line 257 "../src/parse/lexer.re"
	{
        RET_FAIL(error_at_cur("ill-formed `ignore` block: "
                "expected a space, a newline, or the end of block"));
    }
#line 826 "src/parse/lexer.cc"
yy131:
	yych = *++cur;
	if (yych == 'e') goto yy155;
	goto yy9;
yy132:
	yych = *++cur;
	if (yych == 't') goto yy157;
	goto yy9;
yy133:
	yych = *++cur;
	if (yych == 't') goto yy158;
	goto yy9;
yy134:
	yych = *++cur;
	if (yych == 'a') goto yy159;
	goto yy9;
yy135:
	yych = *++cur;
	if (yych == 'r') goto yy160;
	goto yy9;
yy136:
	yych = *++cur;
	if (yych == 'e') goto yy161;
	goto yy9;
yy137:
	yych = *++cur;
	if (yych == 'd') goto yy162;
	goto yy9;
yy138:
	yych = *++cur;
	if (yych == ':') goto yy163;
	goto yy9;
yy139:
	yych = *++cur;
	if (yych == 'e') goto yy164;
	goto yy9;
yy140:
	yych = *++cur;
	if (yych == 'a') goto yy165;
	goto yy9;
yy141:
	yych = *++cur;
	if (yych == ':') goto yy166;
	goto yy9;
yy142:
	yych = *++cur;
	if (yych == ':') goto yy167;
	goto yy9;
yy143:
	yych = *++cur;
	if (yych == ':') goto yy168;
	goto yy9;
yy144:
	yych = *++cur;
	if (yych == ':') goto yy169;
	goto yy9;
yy145:
	yych = *++cur;
	if (yych == 'e') goto yy170;
	goto yy9;
yy146:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy146;
		goto yy9;
	} else {
		if (yych <= ' ') goto yy146;
		if (yych == '"') goto yy171;
		goto yy9;
	}
yy147:
	++cur;
	cur = yyt1;
#line 270 "../src/parse/lexer.re"
	{
        out.gen_raw(tok, ptr);
        out.gen_stmt(code_newline(alc));
        CHECK_RET(set_sourceline());
        goto next;
    }
#line 909 "src/parse/lexer.cc"
yy148:
	yych = *++cur;
	if (yych == '\n') goto yy147;
	goto yy9;
yy149:
	yych = *++cur;
	if (yych == 'o') goto yy172;
	goto yy9;
yy150:
	yych = *++cur;
	if (yych == 'e') goto yy173;
	goto yy9;
yy151:
	yych = *++cur;
	if (yych == 'o') goto yy174;
	goto yy9;
yy152:
	++cur;
	cur = yyt1;
#line 251 "../src/parse/lexer.re"
	{
        out.gen_raw(tok, ptr);
        // allows arbitrary garbage before the end of the comment
        CHECK_RET(lex_block_end(out, true));
        goto next;
    }
#line 936 "src/parse/lexer.cc"
yy153:
	yych = *++cur;
	if (yych == '}') goto yy152;
	goto yy9;
yy154:
	yych = *++cur;
	if (yych == '/') goto yy152;
	goto yy9;
yy155:
	yyaccept = 5;
	yych = *(mar = ++cur);
	if (yych == '\t') goto yy175;
	if (yych == ' ') goto yy175;
yy156:
#line 247 "../src/parse/lexer.re"
	{
        RET_FAIL(error_at_cur("ill-formed `include` directive: expected filename in quotes"));
    }
#line 955 "src/parse/lexer.cc"
yy157:
	yych = *++cur;
	if (yych == 'c') goto yy176;
	goto yy9;
yy158:
	yych = *++cur;
	if (yych == 'i') goto yy177;
	goto yy9;
yy159:
	yych = *++cur;
	if (yych == 't') goto yy178;
	goto yy9;
yy160:
	yych = *++cur;
	if (yych == ':') goto yy179;
	goto yy9;
yy161:
	yych = *++cur;
	if (yych == ':') goto yy180;
	goto yy9;
yy162:
	yych = *++cur;
	if (yych == 'e') goto yy181;
	goto yy9;
yy163:
	yych = *++cur;
	if (yych == 'r') goto yy182;
	goto yy9;
yy164:
	yych = *++cur;
	if (yych == '2') goto yy183;
	goto yy9;
yy165:
	yych = *++cur;
	if (yych == 't') goto yy184;
	goto yy9;
yy166:
	yych = *++cur;
	if (yych == 'r') goto yy185;
	goto yy9;
yy167:
	yych = *++cur;
	if (yych == 'r') goto yy186;
	goto yy9;
yy168:
	yych = *++cur;
	if (yych == 'r') goto yy187;
	goto yy9;
yy169:
	yych = *++cur;
	if (yych == 'r') goto yy188;
	goto yy9;
yy170:
	yych = *++cur;
	if (yych == '2') goto yy189;
	goto yy9;
yy171:
	++cur;
	if ((lim - cur) < 3) if (!fill(3)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) {
		goto yy171;
	}
	if (yych <= '\n') goto yy9;
	if (yych <= '"') goto yy190;
	goto yy191;
yy172:
	yych = *++cur;
	if (yych == 'n') goto yy192;
	goto yy9;
yy173:
	++cur;
#line 208 "../src/parse/lexer.re"
	{
        out.state_goto = true;
        if (!opts->storable_state) {
            RET_FAIL(error_at_cur("`getstate` without `-f --storable-state` option"));
        } else if (opts->code_model == CodeModel::LOOP_SWITCH) {
            RET_FAIL(error_at_cur(
                    "`getstate` is incompatible with --loop-switch code model, it requires"
                    " cross-block `goto` transitions or function calls"));
        }
        CHECK_RET(lex_special_block(out, CodeKind::STATE_GOTO, 0));
        goto next;
    }
#line 1041 "src/parse/lexer.cc"
yy174:
	yych = *++cur;
	if (yych == 'f') goto yy193;
	if (yych == 'n') goto yy194;
	goto yy9;
yy175:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy175;
		goto yy9;
	} else {
		if (yych <= ' ') goto yy175;
		if (yych == '"') {
			yyt1 = cur;
			goto yy195;
		}
		goto yy9;
	}
yy176:
	yych = *++cur;
	if (yych == 'h') goto yy196;
	goto yy9;
yy177:
	yych = *++cur;
	if (yych == 'o') goto yy197;
	goto yy9;
yy178:
	yych = *++cur;
	if (yych == 'e') goto yy198;
	goto yy9;
yy179:
	yych = *++cur;
	if (yych == 'r') goto yy199;
	goto yy9;
yy180:
	yych = *++cur;
	if (yych == 'r') goto yy200;
	goto yy9;
yy181:
	yych = *++cur;
	if (yych == ':') goto yy201;
	goto yy9;
yy182:
	yych = *++cur;
	if (yych == 'e') goto yy202;
	goto yy9;
yy183:
	yych = *++cur;
	if (yych == 'c') goto yy203;
	goto yy9;
yy184:
	yych = *++cur;
	if (yych == 'c') goto yy204;
	goto yy9;
yy185:
	yych = *++cur;
	if (yych == 'e') goto yy205;
	goto yy9;
yy186:
	yych = *++cur;
	if (yych == 'e') goto yy206;
	goto yy9;
yy187:
	yych = *++cur;
	if (yych == 'e') goto yy207;
	goto yy9;
yy188:
	yych = *++cur;
	if (yych == 'e') goto yy208;
	goto yy9;
yy189:
	yych = *++cur;
	if (yych == 'c') goto yy60;
	goto yy9;
yy190:
	yych = *++cur;
	if (yych == '\n') goto yy147;
	if (yych == '\r') goto yy148;
	goto yy9;
yy191:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x00) goto yy9;
	if (yych == '\n') goto yy9;
	goto yy171;
yy192:
	yych = *++cur;
	if (yych == 's') goto yy209;
	goto yy9;
yy193:
	yych = *++cur;
	if (yych == 'f') goto yy210;
	goto yy9;
yy194:
	++cur;
#line 221 "../src/parse/lexer.re"
	{
        out.gen_raw(tok, ptr);
        out.header_mode(true);
        out.need_header = true;
        CHECK_RET(lex_block_end(out));
        goto next;
    }
#line 1148 "src/parse/lexer.cc"
yy195:
	++cur;
	if ((lim - cur) < 3) if (!fill(3)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '!') {
		if (yych <= 0x00) goto yy9;
		if (yych == '\n') goto yy9;
		goto yy195;
	} else {
		if (yych <= '"') goto yy211;
		if (yych == '\\') goto yy212;
		goto yy195;
	}
yy196:
	++cur;
#line 183 "../src/parse/lexer.re"
	{
        CHECK_RET(lex_special_block(out, CodeKind::MAXNMATCH, DCONF_FORMAT));
        goto next;
    }
#line 1169 "src/parse/lexer.cc"
yy197:
	yych = *++cur;
	if (yych == 'n') goto yy122;
	goto yy9;
yy198:
	yych = *++cur;
	if (yych == ':') goto yy213;
	goto yy9;
yy199:
	yych = *++cur;
	if (yych == 'e') goto yy214;
	goto yy9;
yy200:
	yych = *++cur;
	if (yych == 'e') goto yy215;
	goto yy9;
yy201:
	yych = *++cur;
	if (yych == 'r') goto yy216;
	goto yy9;
yy202:
	yych = *++cur;
	if (yych == '2') goto yy217;
	goto yy9;
yy203:
	++cur;
	goto yy56;
yy204:
	yych = *++cur;
	if (yych == 'h') goto yy218;
	goto yy9;
yy205:
	yych = *++cur;
	if (yych == '2') goto yy219;
	goto yy9;
yy206:
	yych = *++cur;
	if (yych == '2') goto yy220;
	goto yy9;
yy207:
	yych = *++cur;
	if (yych == '2') goto yy221;
	goto yy9;
yy208:
	yych = *++cur;
	if (yych == '2') goto yy222;
	goto yy9;
yy209:
	++cur;
#line 200 "../src/parse/lexer.re"
	{
        out.cond_enum_autogen = false;
        out.warn_condition_order = false; // see note [condition order]
        uint32_t allow = DCONF_FORMAT | DCONF_SEPARATOR;
        CHECK_RET(lex_special_block(out, CodeKind::COND_ENUM, allow));
        goto next;
    }
#line 1227 "src/parse/lexer.cc"
yy210:
	++cur;
#line 229 "../src/parse/lexer.re"
	{
        out.gen_raw(tok, ptr);
        out.header_mode(false);
        if (globopts->line_dirs) out.gen_stmt(code_line_info_input(alc, cur_loc()));
        CHECK_RET(lex_block_end(out));
        goto next;
    }
#line 1238 "src/parse/lexer.cc"
yy211:
	yych = *++cur;
	if (yych <= 0x1F) {
		if (yych <= '\n') {
			if (yych <= 0x08) goto yy9;
			yyt2 = cur;
			goto yy223;
		} else {
			if (yych == '\r') {
				yyt2 = cur;
				goto yy223;
			}
			goto yy9;
		}
	} else {
		if (yych <= '%') {
			if (yych <= ' ') {
				yyt2 = cur;
				goto yy223;
			}
			if (yych <= '$') goto yy9;
			yyt2 = cur;
			goto yy224;
		} else {
			if (yych == '*') {
				yyt2 = cur;
				goto yy225;
			}
			goto yy9;
		}
	}
yy212:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x00) goto yy9;
	if (yych == '\n') goto yy9;
	goto yy195;
yy213:
	yych = *++cur;
	if (yych == 'r') goto yy226;
	goto yy9;
yy214:
	yych = *++cur;
	if (yych == '2') goto yy227;
	goto yy9;
yy215:
	yych = *++cur;
	if (yych == '2') goto yy228;
	goto yy9;
yy216:
	yych = *++cur;
	if (yych == 'e') goto yy229;
	goto yy9;
yy217:
	yych = *++cur;
	if (yych == 'c') goto yy105;
	goto yy9;
yy218:
	yych = *++cur;
	if (yych == ':') goto yy230;
	goto yy9;
yy219:
	yych = *++cur;
	if (yych == 'c') goto yy107;
	goto yy9;
yy220:
	yych = *++cur;
	if (yych == 'c') goto yy108;
	goto yy9;
yy221:
	yych = *++cur;
	if (yych == 'c') goto yy109;
	goto yy9;
yy222:
	yych = *++cur;
	if (yych == 'c') goto yy209;
	goto yy9;
yy223:
	++cur;
	x = yyt1;
	y = yyt2;
	cur = yyt2;
#line 240 "../src/parse/lexer.re"
	{
        out.gen_raw(tok, ptr);
        CHECK_RET(lex_block_end(out));
        CHECK_RET(include(getstr(x + 1, y - 1), ptr));
        if (globopts->line_dirs) out.gen_stmt(code_line_info_input(alc, cur_loc()));
        goto next;
    }
#line 1330 "src/parse/lexer.cc"
yy224:
	yych = *++cur;
	if (yych == '}') goto yy223;
	goto yy9;
yy225:
	yych = *++cur;
	if (yych == '/') goto yy223;
	goto yy9;
yy226:
	yych = *++cur;
	if (yych == 'e') goto yy231;
	goto yy9;
yy227:
	yych = *++cur;
	if (yych == 'c') goto yy127;
	goto yy9;
yy228:
	yych = *++cur;
	if (yych == 'c') goto yy129;
	goto yy9;
yy229:
	yych = *++cur;
	if (yych == '2') goto yy232;
	goto yy9;
yy230:
	yych = *++cur;
	if (yych == 'r') goto yy233;
	goto yy9;
yy231:
	yych = *++cur;
	if (yych == '2') goto yy234;
	goto yy9;
yy232:
	yych = *++cur;
	if (yych == 'c') goto yy155;
	goto yy9;
yy233:
	yych = *++cur;
	if (yych == 'e') goto yy235;
	goto yy9;
yy234:
	yych = *++cur;
	if (yych == 'c') goto yy173;
	goto yy9;
yy235:
	yych = *++cur;
	if (yych != '2') goto yy9;
	yych = *++cur;
	if (yych == 'c') goto yy196;
	goto yy9;
}
#line 283 "../src/parse/lexer.re"

}

#undef RET_BLOCK

Ret Input::lex_opt_name(std::string& name) {
    tok = cur;

#line 1391 "src/parse/lexer.cc"
{
	uint8_t yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0,   0,   0,   0,   0,   0, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0, 128, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *(mar = cur);
	if (yych <= ' ') {
		if (yych <= '\f') {
			if (yych <= 0x08) goto yy237;
			if (yych <= '\n') {
				yyt1 = cur;
				goto yy238;
			}
		} else {
			if (yych <= '\r') {
				yyt1 = cur;
				goto yy238;
			}
			if (yych >= ' ') {
				yyt1 = cur;
				goto yy238;
			}
		}
	} else {
		if (yych <= ')') {
			if (yych == '%') {
				yyt1 = cur;
				goto yy239;
			}
		} else {
			if (yych <= '*') {
				yyt1 = cur;
				goto yy241;
			}
			if (yych == ':') goto yy242;
		}
	}
yy237:
#line 291 "../src/parse/lexer.re"
	{
        RET_FAIL(error_at_cur(
                "ill-formed start of a block: expected a space, a newline, a colon "
                "followed by a block name, or the end of block"));
    }
#line 1468 "src/parse/lexer.cc"
yy238:
	++cur;
	cur = yyt1;
#line 297 "../src/parse/lexer.re"
	{ name.clear();              return Ret::OK; }
#line 1474 "src/parse/lexer.cc"
yy239:
	yych = *++cur;
	if (yych == '}') goto yy238;
yy240:
	cur = mar;
	goto yy237;
yy241:
	yych = *++cur;
	if (yych == '/') goto yy238;
	goto yy240;
yy242:
	yych = *++cur;
	if (yych <= '^') {
		if (yych <= '@') goto yy240;
		if (yych >= '[') goto yy240;
	} else {
		if (yych == '`') goto yy240;
		if (yych >= '{') goto yy240;
	}
yy243:
	++cur;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) {
		goto yy243;
	}
	if (yych <= 0x1F) {
		if (yych <= '\n') {
			if (yych <= 0x08) goto yy240;
			yyt1 = cur;
		} else {
			if (yych != '\r') goto yy240;
			yyt1 = cur;
		}
	} else {
		if (yych <= '%') {
			if (yych <= ' ') {
				yyt1 = cur;
				goto yy244;
			}
			if (yych <= '$') goto yy240;
			yyt1 = cur;
			goto yy245;
		} else {
			if (yych == '*') {
				yyt1 = cur;
				goto yy246;
			}
			goto yy240;
		}
	}
yy244:
	++cur;
	cur = yyt1;
#line 298 "../src/parse/lexer.re"
	{ name.assign(tok + 1, cur); return Ret::OK; }
#line 1531 "src/parse/lexer.cc"
yy245:
	yych = *++cur;
	if (yych == '}') goto yy244;
	goto yy240;
yy246:
	yych = *++cur;
	if (yych == '/') goto yy244;
	goto yy240;
}
#line 299 "../src/parse/lexer.re"

}

Ret Input::lex_name_list(BlockNameList** ptail) {
    BlockNameList** phead = ptail;
loop:
    tok = cur;

#line 1550 "src/parse/lexer.cc"
{
	uint8_t yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0,   0,   0,   0,   0,   0, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0, 128, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *(mar = cur);
	if (yych <= ' ') {
		if (yych <= '\f') {
			if (yych <= 0x08) goto yy248;
			if (yych <= '\n') {
				yyt1 = cur;
				goto yy249;
			}
		} else {
			if (yych <= '\r') {
				yyt1 = cur;
				goto yy249;
			}
			if (yych >= ' ') {
				yyt1 = cur;
				goto yy249;
			}
		}
	} else {
		if (yych <= ')') {
			if (yych == '%') {
				yyt1 = cur;
				goto yy250;
			}
		} else {
			if (yych <= '*') {
				yyt1 = cur;
				goto yy252;
			}
			if (yych == ':') goto yy253;
		}
	}
yy248:
#line 307 "../src/parse/lexer.re"
	{
        RET_FAIL(error_at_cur(
                "ill-formed start of a block: expected a space, a newline, a colon followed by a"
                " list of colon-separated block names, or the end of block `*" "/`"));
    }
#line 1627 "src/parse/lexer.cc"
yy249:
	++cur;
	cur = yyt1;
#line 313 "../src/parse/lexer.re"
	{ *ptail = nullptr; return Ret::OK; }
#line 1633 "src/parse/lexer.cc"
yy250:
	yych = *++cur;
	if (yych == '}') goto yy249;
yy251:
	cur = mar;
	goto yy248;
yy252:
	yych = *++cur;
	if (yych == '/') goto yy249;
	goto yy251;
yy253:
	yych = *++cur;
	if (yych <= '^') {
		if (yych <= '@') goto yy251;
		if (yych >= '[') goto yy251;
	} else {
		if (yych == '`') goto yy251;
		if (yych >= '{') goto yy251;
	}
yy254:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) {
		goto yy254;
	}
#line 315 "../src/parse/lexer.re"
	{
        BlockNameList *l = alc.alloct<BlockNameList>(1);
        l->name = newcstr(tok + 1, cur, alc);
        l->next = nullptr;
        *ptail = l;
        ptail = &l->next;

        // Check that the added name is unique.
        for (const BlockNameList *p = *phead; p != l; p = p->next) {
            if (strcmp(p->name, l->name) == 0) {
                RET_FAIL(error_at_cur("duplicate block '%s' on the list", p->name));
            }
        }

        goto loop;
    }
#line 1677 "src/parse/lexer.cc"
}
#line 331 "../src/parse/lexer.re"

}

Ret Input::lex_block_end(Output& out, bool allow_garbage) {
    bool multiline = false;
loop: 
#line 1686 "src/parse/lexer.cc"
{
	uint8_t yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) {
		goto yy258;
	}
	if (yych <= '\r') {
		if (yych <= 0x08) goto yy256;
		if (yych <= '\n') goto yy259;
		if (yych >= '\r') goto yy260;
	} else {
		if (yych <= '%') {
			if (yych >= '%') goto yy261;
		} else {
			if (yych == '*') goto yy262;
		}
	}
yy256:
	++cur;
yy257:
#line 337 "../src/parse/lexer.re"
	{
        if (allow_garbage && !is_eof()) goto loop;
        RET_FAIL(error_at_cur(
                "ill-formed end of block: expected optional whitespaces followed by `*" "/`"));
    }
#line 1748 "src/parse/lexer.cc"
yy258:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) {
		goto yy258;
	}
#line 348 "../src/parse/lexer.re"
	{ goto loop; }
#line 1758 "src/parse/lexer.cc"
yy259:
	++cur;
#line 349 "../src/parse/lexer.re"
	{ next_line(); multiline = true; goto loop; }
#line 1763 "src/parse/lexer.cc"
yy260:
	yych = *++cur;
	if (yych == '\n') goto yy259;
	goto yy257;
yy261:
	yych = *++cur;
	if (yych == '}') goto yy263;
	goto yy257;
yy262:
	yych = *++cur;
	if (yych != '/') goto yy257;
yy263:
	++cur;
#line 342 "../src/parse/lexer.re"
	{
        if (multiline && globopts->line_dirs) {
            out.gen_stmt(code_line_info_input(out.allocator, cur_loc()));
        }
        return Ret::OK;
    }
#line 1784 "src/parse/lexer.cc"
}
#line 350 "../src/parse/lexer.re"

}

Ret Input::lex_special_block(Output& out, CodeKind kind, uint32_t mask) {
    const char* fmt = nullptr, *sep = nullptr;
    BlockNameList* blocks;

    out.gen_raw(tok, ptr, globopts->line_dirs);
    CHECK_RET(lex_name_list(&blocks));

loop: 
#line 1798 "src/parse/lexer.cc"
{
	uint8_t yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((lim - cur) < 9) if (!fill(9)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) {
		goto yy267;
	}
	if (yych <= '%') {
		if (yych <= '\f') {
			if (yych <= 0x08) goto yy265;
			if (yych <= '\n') goto yy268;
		} else {
			if (yych <= '\r') goto yy269;
			if (yych >= '%') goto yy270;
		}
	} else {
		if (yych <= 'e') {
			if (yych == '*') goto yy271;
		} else {
			if (yych <= 'f') goto yy272;
			if (yych == 's') goto yy273;
		}
	}
yy265:
	++cur;
yy266:
#line 361 "../src/parse/lexer.re"
	{
        RET_FAIL(error_at_cur(
                "ill-formed directive: expected optional configurations followed by the end of"
                " block `*" "/`"));
    }
#line 1865 "src/parse/lexer.cc"
yy267:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) {
		goto yy267;
	}
#line 385 "../src/parse/lexer.re"
	{ goto loop; }
#line 1875 "src/parse/lexer.cc"
yy268:
	++cur;
#line 387 "../src/parse/lexer.re"
	{ next_line(); goto loop; }
#line 1880 "src/parse/lexer.cc"
yy269:
	yych = *++cur;
	if (yych == '\n') goto yy268;
	goto yy266;
yy270:
	yych = *++cur;
	if (yych == '}') goto yy274;
	goto yy266;
yy271:
	yych = *++cur;
	if (yych == '/') goto yy274;
	goto yy266;
yy272:
	yych = *(mar = ++cur);
	if (yych == 'o') goto yy275;
	goto yy266;
yy273:
	yych = *(mar = ++cur);
	if (yych == 'e') goto yy277;
	goto yy266;
yy274:
	++cur;
#line 389 "../src/parse/lexer.re"
	{
        if (globopts->line_dirs) out.gen_stmt(code_line_info_output(alc));
        out.gen_stmt(code_fmt(alc, kind, blocks, fmt, sep));
        if (globopts->line_dirs) out.gen_stmt(code_line_info_input(alc, cur_loc()));
        return Ret::OK;
    }
#line 1910 "src/parse/lexer.cc"
yy275:
	yych = *++cur;
	if (yych == 'r') goto yy278;
yy276:
	cur = mar;
	goto yy266;
yy277:
	yych = *++cur;
	if (yych == 'p') goto yy279;
	goto yy276;
yy278:
	yych = *++cur;
	if (yych == 'm') goto yy280;
	goto yy276;
yy279:
	yych = *++cur;
	if (yych == 'a') goto yy281;
	goto yy276;
yy280:
	yych = *++cur;
	if (yych == 'a') goto yy282;
	goto yy276;
yy281:
	yych = *++cur;
	if (yych == 'r') goto yy283;
	goto yy276;
yy282:
	yych = *++cur;
	if (yych == 't') goto yy284;
	goto yy276;
yy283:
	yych = *++cur;
	if (yych == 'a') goto yy285;
	goto yy276;
yy284:
	++cur;
#line 367 "../src/parse/lexer.re"
	{
        if ((mask & DCONF_FORMAT) == 0) {
            RET_FAIL(error_at_cur("unexpected configuration 'format'"));
        }
        CHECK_RET(lex_conf_string_legacy());
        fmt = copystr(tmp_str, alc);
        goto loop;
    }
#line 1956 "src/parse/lexer.cc"
yy285:
	yych = *++cur;
	if (yych != 't') goto yy276;
	yych = *++cur;
	if (yych != 'o') goto yy276;
	yych = *++cur;
	if (yych != 'r') goto yy276;
	++cur;
#line 376 "../src/parse/lexer.re"
	{
        if ((mask & DCONF_SEPARATOR) == 0) {
            RET_FAIL(error_at_cur("unexpected configuration 'separator'"));
        }
        CHECK_RET(lex_conf_string_legacy());
        sep = copystr(tmp_str, alc);
        goto loop;
    }
#line 1974 "src/parse/lexer.cc"
}
#line 395 "../src/parse/lexer.re"

}

#define RET_TOK(t) do { token = t; return Ret::OK; } while(0)

Ret Input::lex_block(YYSTYPE* yylval, Ast& ast, int& token) {
    const uint8_t* p, *x, *y;
scan:
    tok = cur;
    location = cur_loc();

#line 1988 "src/parse/lexer.cc"
{
	uint8_t yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 144,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		144, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 128, 128, 128, 128, 128, 128, 
		128, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 128,   0, 128, 128, 160, 
		128, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((lim - cur) < 9) if (!fill(9)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 16) {
		goto yy289;
	}
	if (yych <= '9') {
		if (yych <= '$') {
			if (yych <= '\r') {
				if (yych <= 0x08) goto yy287;
				if (yych <= '\n') goto yy290;
				if (yych >= '\r') goto yy292;
			} else {
				if (yych <= '!') {
					if (yych >= ' ') goto yy293;
				} else {
					if (yych <= '"') goto yy295;
					if (yych <= '#') goto yy296;
					goto yy297;
				}
			}
		} else {
			if (yych <= '*') {
				if (yych <= '&') {
					if (yych <= '%') goto yy298;
				} else {
					if (yych <= '\'') goto yy299;
					if (yych <= ')') goto yy297;
					goto yy300;
				}
			} else {
				if (yych <= '-') {
					if (yych <= '+') goto yy297;
				} else {
					if (yych <= '.') goto yy301;
					if (yych <= '/') goto yy302;
				}
			}
		}
	} else {
		if (yych <= '[') {
			if (yych <= '=') {
				if (yych <= ':') goto yy303;
				if (yych <= ';') goto yy297;
				if (yych <= '<') goto yy304;
				goto yy305;
			} else {
				if (yych <= '?') {
					if (yych >= '?') goto yy297;
				} else {
					if (yych <= '@') goto yy296;
					if (yych <= 'Z') goto yy306;
					goto yy308;
				}
			}
		} else {
			if (yych <= 'q') {
				if (yych <= '^') {
					if (yych <= '\\') goto yy297;
				} else {
					if (yych != '`') goto yy306;
				}
			} else {
				if (yych <= 'z') {
					if (yych <= 'r') goto yy309;
					goto yy306;
				} else {
					if (yych <= '{') goto yy310;
					if (yych <= '|') goto yy297;
				}
			}
		}
	}
yy287:
	++cur;
yy288:
#line 536 "../src/parse/lexer.re"
	{
        if (globopts->flex_syntax && globopts->input_encoding == Enc::Type::UTF8) {
            // Try to lex this as a raw UTF-8 code point (not captured by the `name` rule above
            // because it is restricted to alphanumeric ASCII characters and underscore).
            --cur;
            uint32_t c;
            CHECK_RET(lex_cls_chr(c));
            ast.temp_chars.push_back({c, tok_loc()});
            yylval->regexp = ast.str(tok_loc(), false);
            RET_TOK(TOKEN_REGEXP);
        }
        RET_FAIL(error_at_tok("unexpected character: '%c'", *tok));
    }
#line 2115 "src/parse/lexer.cc"
yy289:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 16) {
		goto yy289;
	}
#line 523 "../src/parse/lexer.re"
	{ goto scan; }
#line 2125 "src/parse/lexer.cc"
yy290:
	yyaccept = 0;
	yych = *(mar = ++cur);
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy312;
	} else {
		if (yych <= ' ') goto yy312;
		if (yych == '#') goto yy314;
	}
yy291:
#line 527 "../src/parse/lexer.re"
	{
        next_line();
        if (mode == LexMode::FLEX_NAME) {
            mode = LexMode::NORMAL;
            RET_TOK(TOKEN_FID_END);
        }
        goto scan;
    }
#line 2145 "src/parse/lexer.cc"
yy292:
	yych = *++cur;
	if (yych == '\n') goto yy290;
	goto yy288;
yy293:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych == 'i') goto yy315;
	if (yych == 'u') goto yy316;
yy294:
#line 432 "../src/parse/lexer.re"
	{ RET_TOK(*tok); }
#line 2158 "src/parse/lexer.cc"
yy295:
	++cur;
#line 423 "../src/parse/lexer.re"
	{ CHECK_RET(lex_str(ast, '"',   yylval->regexp)); RET_TOK(TOKEN_REGEXP); }
#line 2163 "src/parse/lexer.cc"
yy296:
	yych = *++cur;
	if (yych <= '^') {
		if (yych <= '@') goto yy288;
		if (yych <= 'Z') goto yy317;
		goto yy288;
	} else {
		if (yych == '`') goto yy288;
		if (yych <= 'z') goto yy317;
		goto yy288;
	}
yy297:
	++cur;
	goto yy294;
yy298:
	yych = *++cur;
	if (yych == '}') goto yy319;
	goto yy288;
yy299:
	++cur;
#line 422 "../src/parse/lexer.re"
	{ CHECK_RET(lex_str(ast, '\'',  yylval->regexp)); RET_TOK(TOKEN_REGEXP); }
#line 2186 "src/parse/lexer.cc"
yy300:
	yych = *++cur;
	if (yych == '/') goto yy319;
	goto yy294;
yy301:
	++cur;
#line 521 "../src/parse/lexer.re"
	{ yylval->regexp = ast.dot(tok_loc()); RET_TOK(TOKEN_REGEXP); }
#line 2195 "src/parse/lexer.cc"
yy302:
	yych = *++cur;
	if (yych == '*') goto yy320;
	if (yych == '/') goto yy321;
	goto yy294;
yy303:
	yych = *++cur;
	if (yych == '=') goto yy322;
	goto yy288;
yy304:
	++cur;
#line 415 "../src/parse/lexer.re"
	{ return lex_clist(ast, token); }
#line 2209 "src/parse/lexer.cc"
yy305:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych == '>') goto yy324;
	goto yy294;
yy306:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
yy307:
	if (yybm[0+yych] & 32) {
		goto yy306;
	}
#line 476 "../src/parse/lexer.re"
	{
        bool yes;
        CHECK_RET(lex_namedef_context_re2c(yes));
        if (!globopts->flex_syntax || yes) {
            yylval->cstr = ast.cstr_local(tok, cur);
            RET_TOK(TOKEN_ID);
        }
        CHECK_RET(lex_namedef_context_flex(yes));
        if (yes) {
            yylval->cstr = ast.cstr_local(tok, cur);
            mode = LexMode::FLEX_NAME;
            RET_TOK(TOKEN_FID);
        }
        // consume one character, otherwise we risk breaking operator precedence in cases like
        // `ab*`: it should be `a(b)*`, not `(ab)*`
        cur = tok + 1;
        ast.temp_chars.push_back({tok[0], tok_loc()});
        yylval->regexp = ast.str(tok_loc(), false);
        RET_TOK(TOKEN_REGEXP);
    }
#line 2244 "src/parse/lexer.cc"
yy308:
	yych = *++cur;
	if (yych == '^') goto yy325;
#line 424 "../src/parse/lexer.re"
	{ CHECK_RET(lex_cls(ast, false, yylval->regexp)); RET_TOK(TOKEN_REGEXP); }
#line 2250 "src/parse/lexer.cc"
yy309:
	yych = *++cur;
	if (yych == 'e') goto yy326;
	goto yy307;
yy310:
	yyaccept = 2;
	yych = *(mar = ++cur);
	if (yybm[0+yych] & 64) {
		goto yy329;
	}
	if (yych <= 'Z') {
		if (yych == ',') goto yy327;
		if (yych >= 'A') goto yy330;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy330;
		} else {
			if (yych <= '`') goto yy311;
			if (yych <= 'z') goto yy330;
		}
	}
yy311:
#line 407 "../src/parse/lexer.re"
	{ CHECK_RET(lex_code_in_braces(yylval, ast)); RET_TOK(TOKEN_CODE); }
#line 2275 "src/parse/lexer.cc"
yy312:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy312;
	} else {
		if (yych <= ' ') goto yy312;
		if (yych == '#') goto yy314;
	}
yy313:
	cur = mar;
	if (yyaccept <= 3) {
		if (yyaccept <= 1) {
			if (yyaccept == 0) {
				goto yy291;
			} else {
				goto yy294;
			}
		} else {
			if (yyaccept == 2) {
				goto yy311;
			} else {
				goto yy323;
			}
		}
	} else {
		if (yyaccept <= 5) {
			if (yyaccept == 4) {
				goto yy328;
			} else {
				goto yy343;
			}
		} else {
			goto yy362;
		}
	}
yy314:
	++cur;
	if ((lim - cur) < 5) if (!fill(5)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy314;
		goto yy313;
	} else {
		if (yych <= ' ') goto yy314;
		if (yych == 'l') goto yy331;
		goto yy313;
	}
yy315:
	yych = *++cur;
	if (yych == 'n') goto yy332;
	goto yy313;
yy316:
	yych = *++cur;
	if (yych == 's') goto yy333;
	goto yy313;
yy317:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy318;
		if (yych <= '9') goto yy317;
		if (yych >= 'A') goto yy317;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy317;
		} else {
			if (yych <= '`') goto yy318;
			if (yych <= 'z') goto yy317;
		}
	}
yy318:
#line 427 "../src/parse/lexer.re"
	{
        yylval->regexp = ast.tag(tok_loc(), ast.cstr_global(tok + 1, cur), tok[0] == '#');
        RET_TOK(TOKEN_REGEXP);
    }
#line 2355 "src/parse/lexer.cc"
yy319:
	++cur;
#line 420 "../src/parse/lexer.re"
	{ tok = cur; RET_TOK(0); }
#line 2360 "src/parse/lexer.cc"
yy320:
	++cur;
#line 418 "../src/parse/lexer.re"
	{ CHECK_RET(lex_c_comment());   goto scan; }
#line 2365 "src/parse/lexer.cc"
yy321:
	++cur;
#line 417 "../src/parse/lexer.re"
	{ CHECK_RET(lex_cpp_comment()); goto scan; }
#line 2370 "src/parse/lexer.cc"
yy322:
	yyaccept = 3;
	yych = *(mar = ++cur);
	if (yych == '>') goto yy324;
yy323:
#line 408 "../src/parse/lexer.re"
	{ CHECK_RET(lex_code_indented(yylval, ast));  RET_TOK(TOKEN_CODE); }
#line 2378 "src/parse/lexer.cc"
yy324:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '@') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy313;
			goto yy324;
		} else {
			if (yych == ' ') goto yy324;
			goto yy313;
		}
	} else {
		if (yych <= '_') {
			if (yych <= 'Z') {
				yyt1 = cur;
				goto yy334;
			}
			if (yych <= '^') goto yy313;
			yyt1 = cur;
			goto yy334;
		} else {
			if (yych <= '`') goto yy313;
			if (yych <= 'z') {
				yyt1 = cur;
				goto yy334;
			}
			goto yy313;
		}
	}
yy325:
	++cur;
#line 425 "../src/parse/lexer.re"
	{ CHECK_RET(lex_cls(ast, true,  yylval->regexp)); RET_TOK(TOKEN_REGEXP); }
#line 2413 "src/parse/lexer.cc"
yy326:
	yych = *++cur;
	if (yych == '2') goto yy336;
	goto yy307;
yy327:
	++cur;
yy328:
#line 461 "../src/parse/lexer.re"
	{
        RET_FAIL(error_at_tok(
                "illegal closure form, use '{n}', '{n,}', '{n,m}' where n and m are numbers"));
    }
#line 2426 "src/parse/lexer.cc"
yy329:
	++cur;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 64) {
		goto yy329;
	}
	if (yych == ',') {
		yyt1 = cur;
		goto yy337;
	}
	if (yych == '}') goto yy338;
	goto yy313;
yy330:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '^') {
		if (yych <= '9') {
			if (yych <= '/') goto yy313;
			goto yy330;
		} else {
			if (yych <= '@') goto yy313;
			if (yych <= 'Z') goto yy330;
			goto yy313;
		}
	} else {
		if (yych <= 'z') {
			if (yych == '`') goto yy313;
			goto yy330;
		} else {
			if (yych == '}') goto yy339;
			goto yy313;
		}
	}
yy331:
	yych = *++cur;
	if (yych == 'i') goto yy340;
	goto yy313;
yy332:
	yych = *++cur;
	if (yych == 'c') goto yy341;
	goto yy313;
yy333:
	yych = *++cur;
	if (yych == 'e') goto yy342;
	goto yy313;
yy334:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy335;
		if (yych <= '9') goto yy334;
		if (yych >= 'A') goto yy334;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy334;
		} else {
			if (yych <= '`') goto yy335;
			if (yych <= 'z') goto yy334;
		}
	}
yy335:
	p = yyt1;
#line 410 "../src/parse/lexer.re"
	{
        yylval->cstr = ast.cstr_global(p, cur);
        RET_TOK(tok[0] == ':' ? TOKEN_CJUMP : TOKEN_CNEXT);
    }
#line 2497 "src/parse/lexer.cc"
yy336:
	yych = *++cur;
	if (yych == 'c') goto yy344;
	goto yy307;
yy337:
	yyaccept = 4;
	yych = *(mar = ++cur);
	if (yych <= '/') goto yy328;
	if (yych <= '9') goto yy345;
	if (yych == '}') goto yy346;
	goto yy328;
yy338:
	++cur;
#line 434 "../src/parse/lexer.re"
	{
        if (!s_to_u32_unsafe (tok + 1, cur - 1, yylval->bounds.min)) {
            RET_FAIL(error_at_tok("repetition count overflow"));
        }
        yylval->bounds.max = yylval->bounds.min;
        RET_TOK(TOKEN_CLOSESIZE);
    }
#line 2519 "src/parse/lexer.cc"
yy339:
	++cur;
#line 466 "../src/parse/lexer.re"
	{
        if (!globopts->flex_syntax) {
            RET_FAIL(error_at_tok("curly braces for names only allowed with -F switch"));
        }
        yylval->cstr = ast.cstr_local(tok + 1, cur - 1);
        RET_TOK(TOKEN_ID);
    }
#line 2530 "src/parse/lexer.cc"
yy340:
	yych = *++cur;
	if (yych == 'n') goto yy347;
	goto yy313;
yy341:
	yych = *++cur;
	if (yych == 'l') goto yy348;
	goto yy313;
yy342:
	yyaccept = 5;
	yych = *(mar = ++cur);
	if (yych == ':') goto yy349;
yy343:
#line 514 "../src/parse/lexer.re"
	{
        RET_FAIL(error_at_tok(
                "ill-formed use directive: expected `!use` followed by a colon, a block name,"
                " optional spaces, a semicolon, and finally a space, a newline, or the end of"
                " block"));
    }
#line 2551 "src/parse/lexer.cc"
yy344:
	yych = *++cur;
	if (yych == ':') goto yy350;
	goto yy307;
yy345:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '/') goto yy313;
	if (yych <= '9') goto yy345;
	if (yych == '}') goto yy351;
	goto yy313;
yy346:
	++cur;
#line 453 "../src/parse/lexer.re"
	{
        if (!s_to_u32_unsafe (tok + 1, cur - 2, yylval->bounds.min)) {
            RET_FAIL(error_at_tok("repetition lower bound overflow"));
        }
        yylval->bounds.max = std::numeric_limits<uint32_t>::max();
        RET_TOK(TOKEN_CLOSESIZE);
    }
#line 2574 "src/parse/lexer.cc"
yy347:
	yych = *++cur;
	if (yych == 'e') goto yy352;
	goto yy313;
yy348:
	yych = *++cur;
	if (yych == 'u') goto yy353;
	goto yy313;
yy349:
	yych = *++cur;
	if (yych <= '^') {
		if (yych <= '@') goto yy313;
		if (yych <= 'Z') {
			yyt1 = cur;
			goto yy354;
		}
		goto yy313;
	} else {
		if (yych == '`') goto yy313;
		if (yych <= 'z') {
			yyt1 = cur;
			goto yy354;
		}
		goto yy313;
	}
yy350:
	++cur;
#line 474 "../src/parse/lexer.re"
	{ RET_TOK(TOKEN_CONF); }
#line 2604 "src/parse/lexer.cc"
yy351:
	++cur;
	p = yyt1;
#line 442 "../src/parse/lexer.re"
	{
        if (!s_to_u32_unsafe(tok + 1, p, yylval->bounds.min)) {
            RET_FAIL(error_at_tok("repetition lower bound overflow"));
        } else if (!s_to_u32_unsafe(p + 1, cur - 1, yylval->bounds.max)) {
            RET_FAIL(error_at_tok("repetition upper bound overflow"));
        } else if (yylval->bounds.min > yylval->bounds.max) {
            RET_FAIL(error_at_tok("repetition lower bound exceeds upper bound"));
        }
        RET_TOK(TOKEN_CLOSESIZE);
    }
#line 2619 "src/parse/lexer.cc"
yy352:
	yych = *++cur;
	if (yych <= '0') goto yy356;
	if (yych <= '9') goto yy313;
	goto yy356;
yy353:
	yych = *++cur;
	if (yych == 'd') goto yy357;
	goto yy313;
yy354:
	++cur;
	if ((lim - cur) < 3) if (!fill(3)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= ':') {
		if (yych <= 0x1F) {
			if (yych == '\t') {
				yyt2 = cur;
				goto yy358;
			}
			goto yy313;
		} else {
			if (yych <= ' ') {
				yyt2 = cur;
				goto yy358;
			}
			if (yych <= '/') goto yy313;
			if (yych <= '9') goto yy354;
			goto yy313;
		}
	} else {
		if (yych <= '^') {
			if (yych <= ';') {
				yyt2 = cur;
				goto yy359;
			}
			if (yych <= '@') goto yy313;
			if (yych <= 'Z') goto yy354;
			goto yy313;
		} else {
			if (yych == '`') goto yy313;
			if (yych <= 'z') goto yy354;
			goto yy313;
		}
	}
yy355:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
yy356:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy355;
		goto yy313;
	} else {
		if (yych <= ' ') goto yy355;
		if (yych <= '0') goto yy313;
		if (yych <= '9') {
			yyt1 = cur;
			goto yy360;
		}
		goto yy313;
	}
yy357:
	yych = *++cur;
	if (yych == 'e') goto yy361;
	goto yy313;
yy358:
	++cur;
	if ((lim - cur) < 3) if (!fill(3)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy358;
		goto yy313;
	} else {
		if (yych <= ' ') goto yy358;
		if (yych != ';') goto yy313;
	}
yy359:
	yych = *++cur;
	if (yych <= 0x1F) {
		if (yych <= '\n') {
			if (yych <= 0x08) goto yy313;
			yyt3 = cur;
			goto yy363;
		} else {
			if (yych == '\r') {
				yyt3 = cur;
				goto yy363;
			}
			goto yy313;
		}
	} else {
		if (yych <= '%') {
			if (yych <= ' ') {
				yyt3 = cur;
				goto yy363;
			}
			if (yych <= '$') goto yy313;
			yyt3 = cur;
			goto yy364;
		} else {
			if (yych == '*') {
				yyt3 = cur;
				goto yy365;
			}
			goto yy313;
		}
	}
yy360:
	++cur;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy313;
			goto yy366;
		} else {
			if (yych <= '\n') goto yy367;
			if (yych <= '\f') goto yy313;
			goto yy368;
		}
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy313;
			goto yy366;
		} else {
			if (yych <= '/') goto yy313;
			if (yych <= '9') goto yy360;
			goto yy313;
		}
	}
yy361:
	yyaccept = 6;
	yych = *(mar = ++cur);
	if (yych == '\t') goto yy369;
	if (yych == ' ') goto yy369;
yy362:
#line 501 "../src/parse/lexer.re"
	{
        RET_FAIL(error_at_tok(
                "ill-formed include directive: expected `!include` followed by spaces, a"
                " double-quoted file path, optional spaces, a semicolon, and finally a space, a"
                " newline, or the end of block"));
    }
#line 2763 "src/parse/lexer.cc"
yy363:
	++cur;
	x = yyt1;
	y = yyt2;
	cur = yyt3;
#line 508 "../src/parse/lexer.re"
	{
        // Save the name of the used block in a temporary buffer (ensure it is empty).
        CHECK(ast.temp_blockname.empty());
        ast.temp_blockname.assign(x, y);
        RET_TOK(TOKEN_BLOCK);
    }
#line 2776 "src/parse/lexer.cc"
yy364:
	yych = *++cur;
	if (yych == '}') goto yy363;
	goto yy313;
yy365:
	yych = *++cur;
	if (yych == '/') goto yy363;
	goto yy313;
yy366:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy366;
		goto yy313;
	} else {
		if (yych <= ' ') goto yy366;
		if (yych == '"') goto yy370;
		goto yy313;
	}
yy367:
	++cur;
	cur = yyt1;
#line 525 "../src/parse/lexer.re"
	{ CHECK_RET(set_sourceline()); RET_TOK(TOKEN_LINE_INFO); }
#line 2802 "src/parse/lexer.cc"
yy368:
	yych = *++cur;
	if (yych == '\n') goto yy367;
	goto yy313;
yy369:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy369;
		goto yy313;
	} else {
		if (yych <= ' ') goto yy369;
		if (yych == '"') {
			yyt1 = cur;
			goto yy371;
		}
		goto yy313;
	}
yy370:
	++cur;
	if ((lim - cur) < 3) if (!fill(3)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) {
		goto yy370;
	}
	if (yych <= '\n') goto yy313;
	if (yych <= '"') goto yy372;
	goto yy373;
yy371:
	++cur;
	if ((lim - cur) < 4) if (!fill(4)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '!') {
		if (yych <= 0x00) goto yy313;
		if (yych == '\n') goto yy313;
		goto yy371;
	} else {
		if (yych <= '"') goto yy374;
		if (yych == '\\') goto yy375;
		goto yy371;
	}
yy372:
	yych = *++cur;
	if (yych == '\n') goto yy367;
	if (yych == '\r') goto yy368;
	goto yy313;
yy373:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x00) goto yy313;
	if (yych == '\n') goto yy313;
	goto yy370;
yy374:
	yych = *++cur;
	if (yych <= 0x1F) {
		if (yych == '\t') {
			yyt2 = cur;
			goto yy376;
		}
		goto yy313;
	} else {
		if (yych <= ' ') {
			yyt2 = cur;
			goto yy376;
		}
		if (yych == ';') {
			yyt2 = cur;
			goto yy377;
		}
		goto yy313;
	}
yy375:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x00) goto yy313;
	if (yych == '\n') goto yy313;
	goto yy371;
yy376:
	++cur;
	if ((lim - cur) < 3) if (!fill(3)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy376;
		goto yy313;
	} else {
		if (yych <= ' ') goto yy376;
		if (yych != ';') goto yy313;
	}
yy377:
	yych = *++cur;
	if (yych <= 0x1F) {
		if (yych <= '\n') {
			if (yych <= 0x08) goto yy313;
			yyt3 = cur;
		} else {
			if (yych != '\r') goto yy313;
			yyt3 = cur;
		}
	} else {
		if (yych <= '%') {
			if (yych <= ' ') {
				yyt3 = cur;
				goto yy378;
			}
			if (yych <= '$') goto yy313;
			yyt3 = cur;
			goto yy379;
		} else {
			if (yych == '*') {
				yyt3 = cur;
				goto yy380;
			}
			goto yy313;
		}
	}
yy378:
	++cur;
	x = yyt1;
	y = yyt2;
	cur = yyt3;
#line 497 "../src/parse/lexer.re"
	{
        CHECK_RET(include(getstr(x + 1, y - 1), tok));
        goto scan;
    }
#line 2931 "src/parse/lexer.cc"
yy379:
	yych = *++cur;
	if (yych == '}') goto yy378;
	goto yy313;
yy380:
	yych = *++cur;
	if (yych == '/') goto yy378;
	goto yy313;
}
#line 549 "../src/parse/lexer.re"

}

#undef RET_TOK

Ret Input::lex_namedef_context_re2c(bool& yes) {

#line 2949 "src/parse/lexer.cc"
{
	uint8_t yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *(mar = cur);
	if (yych <= 0x1F) {
		if (yych == '\t') {
			yyt1 = cur;
			goto yy383;
		}
	} else {
		if (yych <= ' ') {
			yyt1 = cur;
			goto yy383;
		}
		if (yych == '=') {
			yyt1 = cur;
			goto yy385;
		}
	}
yy382:
#line 557 "../src/parse/lexer.re"
	{ yes = false; return Ret::OK; }
#line 3006 "src/parse/lexer.cc"
yy383:
	++cur;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) {
		goto yy383;
	}
	if (yych == '=') goto yy385;
yy384:
	cur = mar;
	goto yy382;
yy385:
	yych = *++cur;
	if (yych == '>') goto yy384;
	++cur;
	cur = yyt1;
#line 556 "../src/parse/lexer.re"
	{ yes = true;  return Ret::OK; }
#line 3025 "src/parse/lexer.cc"
}
#line 558 "../src/parse/lexer.re"

}

Ret Input::lex_namedef_context_flex(bool& yes) {

#line 3033 "src/parse/lexer.cc"
{
	uint8_t yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych == '\t') {
		yyt1 = cur;
		goto yy387;
	}
	if (yych == ' ') {
		yyt1 = cur;
		goto yy387;
	}
#line 565 "../src/parse/lexer.re"
	{ yes = false; return Ret::OK; }
#line 3082 "src/parse/lexer.cc"
yy387:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) {
		goto yy387;
	}
	if (yych <= '<') {
		if (yych == ':') goto yy388;
	} else {
		if (yych <= '=') goto yy388;
		if (yych == '{') goto yy388;
	}
	cur = yyt1;
#line 564 "../src/parse/lexer.re"
	{ yes = true;  return Ret::OK; }
#line 3099 "src/parse/lexer.cc"
yy388:
	++cur;
	cur = yyt1;
#line 563 "../src/parse/lexer.re"
	{ yes = false; return Ret::OK; }
#line 3105 "src/parse/lexer.cc"
}
#line 566 "../src/parse/lexer.re"

}

Ret Input::lex_clist(Ast& ast, int& token) {
    token = TOKEN_CLIST;
    std::set<std::string>& cl = ast.temp_condlist;
    // Due to the re2c grammar parser must reduce each condition list before shifing a new one.
    CHECK(cl.empty());

#line 3117 "src/parse/lexer.cc"
{
	uint8_t yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	goto yy389;
yy390:
	++cur;
yy389:
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) {
		goto yy390;
	}
	if (yych <= 0x1F) goto yy391;
	if (yych <= '!') goto yy392;
	if (yych == '>') goto yy393;
yy391:
#line 577 "../src/parse/lexer.re"
	{ goto cond; }
#line 3169 "src/parse/lexer.cc"
yy392:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych == '\t') goto yy392;
	if (yych == ' ') goto yy392;
#line 575 "../src/parse/lexer.re"
	{ token = TOKEN_CSETUP; goto cond; }
#line 3178 "src/parse/lexer.cc"
yy393:
	++cur;
#line 576 "../src/parse/lexer.re"
	{ token = TOKEN_CZERO;  goto end; }
#line 3183 "src/parse/lexer.cc"
}
#line 578 "../src/parse/lexer.re"

cond:
    tok = cur;

#line 3190 "src/parse/lexer.cc"
{
	uint8_t yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0,   0,   0,   0,   0,   0, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0, 128, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 'Z') {
		if (yych == '*') goto yy396;
		if (yych >= 'A') goto yy397;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy397;
		} else {
			if (yych <= '`') goto yy395;
			if (yych <= 'z') goto yy397;
		}
	}
yy395:
	++cur;
#line 584 "../src/parse/lexer.re"
	{ goto error; }
#line 3244 "src/parse/lexer.cc"
yy396:
	++cur;
#line 583 "../src/parse/lexer.re"
	{ if (!cl.empty()) goto error; cl.insert("*"); goto next; }
#line 3249 "src/parse/lexer.cc"
yy397:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) {
		goto yy397;
	}
#line 582 "../src/parse/lexer.re"
	{ cl.insert(getstr(tok, cur)); goto next; }
#line 3259 "src/parse/lexer.cc"
}
#line 585 "../src/parse/lexer.re"

next: 
#line 3264 "src/parse/lexer.cc"
{
	uint8_t yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= ' ') {
		if (yych == '\t') goto yy400;
		if (yych >= ' ') goto yy400;
	} else {
		if (yych <= ',') {
			if (yych >= ',') goto yy401;
		} else {
			if (yych == '>') goto yy402;
		}
	}
	++cur;
yy399:
#line 589 "../src/parse/lexer.re"
	{ goto error; }
#line 3317 "src/parse/lexer.cc"
yy400:
	yych = *(mar = ++cur);
	if (yych <= ' ') {
		if (yych == '\t') goto yy403;
		if (yych <= 0x1F) goto yy399;
		goto yy403;
	} else {
		if (yych <= ',') {
			if (yych <= '+') goto yy399;
		} else {
			if (yych == '>') goto yy402;
			goto yy399;
		}
	}
yy401:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) {
		goto yy401;
	}
#line 587 "../src/parse/lexer.re"
	{ goto cond; }
#line 3341 "src/parse/lexer.cc"
yy402:
	++cur;
#line 588 "../src/parse/lexer.re"
	{ goto end; }
#line 3346 "src/parse/lexer.cc"
yy403:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= ' ') {
		if (yych == '\t') goto yy403;
		if (yych >= ' ') goto yy403;
	} else {
		if (yych <= ',') {
			if (yych >= ',') goto yy401;
		} else {
			if (yych == '>') goto yy402;
		}
	}
	cur = mar;
	goto yy399;
}
#line 590 "../src/parse/lexer.re"

end:
    // semantic value `yylval` is implicitly passed in temporary condition list
    return Ret::OK;
error:
    cl.clear();
    RET_FAIL(error_at_cur("syntax error in condition list"));
}

Ret Input::process_semact(YYSTYPE* yylval, Ast& ast, const uint8_t* p, const uint8_t* q) {
    const char* text = "";
    if (globopts->indentation_sensitive) {
        // Cut off any leading or trailing newlines to make the code uniform.
        while (p <= q && *p == '\n') ++p;
        while (p <= q && *q == '\n') --q;

        if (p <= q) {
            // Split semantic action by newlines (note: last character `*q` is not a newline).
            // Drop blank lines (this simplifies the code below that removes indentation).
            auto is_blank = [](const uint8_t* s, const uint8_t* e) {
                while (s < e && is_space(*s)) ++s;
                return s == e;
            };
            tmp_list.clear();
            for (const uint8_t* s = p; s < q; ++s) {
                if (*s == '\n') {
                    if (!is_blank(p, s)) tmp_list.push_back(std::string(p, s + 1));
                    p = s + 1;
                }
            }
            if (!is_blank(p, q + 1)) tmp_list.push_back(std::string(p, q + 1) + "\n");

            if (!tmp_list.empty()) {
                // Find first line indentation and use it as base indentation.
                const std::string& first = tmp_list[0];
                uint32_t indent = 0;
                while (is_space_nonl(static_cast<uint8_t>(first[indent]))) ++indent;
                std::string indstr = first.substr(0, indent);

                // Cut off base indentation from every line and glue them together.
                tmp_str.clear();
                for (std::string& line: tmp_list) {
                    if (line.compare(0, indent, indstr) == 0) {
                        tmp_str += line.substr(indent, std::string::npos); // remove indent
                    } else {
                        RET_FAIL(error_at_tok("inconsistent indentation in semantic action"));
                    }
                }
                text = copystr(tmp_str, alc);
            }
        }
    } else {
        // copy the entire semantic action verbatim
        text = ast.cstr_global(p, q + 1);
    }

    yylval->semact = ast.sem_act(tok_loc(), text, nullptr, false);
    return Ret::OK;
}

Ret Input::lex_code_indented(YYSTYPE* yylval, Ast& ast) {
    tok = cur;
code: 
#line 3428 "src/parse/lexer.cc"
{
	uint8_t yych;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '\'') {
		if (yych <= '\r') {
			if (yych == '\n') goto yy406;
			if (yych >= '\r') goto yy407;
		} else {
			if (yych == '"') goto yy408;
			if (yych >= '\'') goto yy408;
		}
	} else {
		if (yych <= '`') {
			if (yych == '/') goto yy409;
			if (yych >= '`') goto yy408;
		} else {
			if (yych <= '{') {
				if (yych >= '{') goto yy410;
			} else {
				if (yych == '}') goto yy410;
			}
		}
	}
	++cur;
yy405:
#line 658 "../src/parse/lexer.re"
	{ goto code; }
#line 3457 "src/parse/lexer.cc"
yy406:
	++cur;
#line 653 "../src/parse/lexer.re"
	{ next_line(); goto indent; }
#line 3462 "src/parse/lexer.cc"
yy407:
	yych = *++cur;
	if (yych == '\n') goto yy406;
	goto yy405;
yy408:
	++cur;
#line 656 "../src/parse/lexer.re"
	{ CHECK_RET(try_lex_literal_in_code(cur[-1])); goto code; }
#line 3471 "src/parse/lexer.cc"
yy409:
	yych = *++cur;
	if (yych == '*') goto yy411;
	if (yych == '/') goto yy412;
	goto yy405;
yy410:
	++cur;
#line 657 "../src/parse/lexer.re"
	{ RET_FAIL(error_at_cur("Curly braces are not allowed after ':='")); }
#line 3481 "src/parse/lexer.cc"
yy411:
	++cur;
#line 655 "../src/parse/lexer.re"
	{ CHECK_RET(lex_c_comment()); goto code; }
#line 3486 "src/parse/lexer.cc"
yy412:
	++cur;
#line 654 "../src/parse/lexer.re"
	{ CHECK_RET(lex_cpp_comment()); goto indent; }
#line 3491 "src/parse/lexer.cc"
}
#line 659 "../src/parse/lexer.re"

indent: 
#line 3496 "src/parse/lexer.cc"
{
	uint8_t yych;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy414;
		if (yych <= '\n') goto yy415;
	} else {
		if (yych <= '\r') goto yy415;
		if (yych == ' ') goto yy415;
	}
yy414:
#line 662 "../src/parse/lexer.re"
	{
        const uint8_t* p = tok, *q = cur - 1;
        if (!globopts->indentation_sensitive) {
            while (p <= q && is_space(*p)) ++p;
            while (p <= q && is_space(*q)) --q;
        }
        return process_semact(yylval, ast, p, q);
    }
#line 3518 "src/parse/lexer.cc"
yy415:
	++cur;
	cur -= 1;
#line 661 "../src/parse/lexer.re"
	{ goto code; }
#line 3524 "src/parse/lexer.cc"
}
#line 670 "../src/parse/lexer.re"

}

Ret Input::lex_code_in_braces(YYSTYPE* yylval, Ast& ast) {
    uint32_t depth = 1;
code: 
#line 3533 "src/parse/lexer.cc"
{
	uint8_t yych;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 160,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((lim - cur) < 3) if (!fill(3)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '\'') {
		if (yych <= '\r') {
			if (yych == '\n') goto yy418;
			if (yych >= '\r') goto yy420;
		} else {
			if (yych == '"') goto yy421;
			if (yych >= '\'') goto yy421;
		}
	} else {
		if (yych <= '`') {
			if (yych == '/') goto yy422;
			if (yych >= '`') goto yy421;
		} else {
			if (yych <= '{') {
				if (yych >= '{') goto yy423;
			} else {
				if (yych == '}') goto yy424;
			}
		}
	}
	++cur;
yy417:
#line 697 "../src/parse/lexer.re"
	{ goto code; }
#line 3596 "src/parse/lexer.cc"
yy418:
	yych = *(mar = ++cur);
	if (yybm[0+yych] & 32) {
		goto yy425;
	}
	if (yych == '#') goto yy427;
yy419:
#line 693 "../src/parse/lexer.re"
	{ next_line(); goto code; }
#line 3606 "src/parse/lexer.cc"
yy420:
	yych = *++cur;
	if (yych == '\n') goto yy418;
	goto yy417;
yy421:
	++cur;
#line 696 "../src/parse/lexer.re"
	{ CHECK_RET(try_lex_literal_in_code(cur[-1])); goto code; }
#line 3615 "src/parse/lexer.cc"
yy422:
	yych = *++cur;
	if (yych == '*') goto yy428;
	if (yych == '/') goto yy429;
	goto yy417;
yy423:
	++cur;
#line 691 "../src/parse/lexer.re"
	{ ++depth; goto code; }
#line 3625 "src/parse/lexer.cc"
yy424:
	++cur;
#line 676 "../src/parse/lexer.re"
	{
        --depth;
        if (depth > 0) goto code;

        const uint8_t* p = tok, *q = cur - 1;
        if (globopts->code_model == CodeModel::REC_FUNC || !globopts->wrap_blocks_in_braces) {
            // Strip curly braces and adjacent whitespace. In rec/func mode it is always safe
            // to do, as the code is in a separate function and won't cause name collisions.
            ++p; --q; // skip '{' and '}'
            while (p <= q && is_space_nonl(*p)) ++p;
            while (p <= q && is_space_nonl(*q)) --q;
        }
        return process_semact(yylval, ast, p, q);
    }
#line 3643 "src/parse/lexer.cc"
yy425:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 32) {
		goto yy425;
	}
	if (yych == '#') goto yy427;
yy426:
	cur = mar;
	goto yy419;
yy427:
	++cur;
	if ((lim - cur) < 5) if (!fill(5)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy427;
		goto yy426;
	} else {
		if (yych <= ' ') goto yy427;
		if (yych == 'l') goto yy430;
		goto yy426;
	}
yy428:
	++cur;
#line 694 "../src/parse/lexer.re"
	{ CHECK_RET(lex_c_comment()); goto code; }
#line 3671 "src/parse/lexer.cc"
yy429:
	++cur;
#line 695 "../src/parse/lexer.re"
	{ CHECK_RET(lex_cpp_comment()); goto code; }
#line 3676 "src/parse/lexer.cc"
yy430:
	yych = *++cur;
	if (yych != 'i') goto yy426;
	yych = *++cur;
	if (yych != 'n') goto yy426;
	yych = *++cur;
	if (yych != 'e') goto yy426;
	yych = *++cur;
	if (yych <= '0') goto yy432;
	if (yych <= '9') goto yy426;
	goto yy432;
yy431:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
yy432:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy431;
		goto yy426;
	} else {
		if (yych <= ' ') goto yy431;
		if (yych <= '0') goto yy426;
		if (yych >= ':') goto yy426;
		yyt1 = cur;
	}
yy433:
	++cur;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 64) {
		goto yy433;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy426;
		if (yych <= '\t') goto yy434;
		if (yych <= '\n') goto yy435;
		goto yy426;
	} else {
		if (yych <= '\r') goto yy436;
		if (yych != ' ') goto yy426;
	}
yy434:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy434;
		goto yy426;
	} else {
		if (yych <= ' ') goto yy434;
		if (yych == '"') goto yy437;
		goto yy426;
	}
yy435:
	++cur;
	cur = yyt1;
#line 692 "../src/parse/lexer.re"
	{ CHECK_RET(set_sourceline()); goto code; }
#line 3735 "src/parse/lexer.cc"
yy436:
	yych = *++cur;
	if (yych == '\n') goto yy435;
	goto yy426;
yy437:
	++cur;
	if ((lim - cur) < 3) if (!fill(3)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) {
		goto yy437;
	}
	if (yych <= '\n') goto yy426;
	if (yych >= '#') goto yy438;
	yych = *++cur;
	if (yych == '\n') goto yy435;
	if (yych == '\r') goto yy436;
	goto yy426;
yy438:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x00) goto yy426;
	if (yych == '\n') goto yy426;
	goto yy437;
}
#line 698 "../src/parse/lexer.re"

}

Ret Input::try_lex_literal_in_code(uint8_t quote) {
    // We need to lex string and char literals in code blocks because they may contain closing
    // brace or newline that would otherwise be erroneously lexed as block terminator symbols.
    if (quote == '"') {
loop_dquote: 
#line 3770 "src/parse/lexer.cc"
{
	uint8_t yych;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '\r') {
		if (yych == '\n') goto yy441;
		if (yych >= '\r') goto yy442;
	} else {
		if (yych <= '"') {
			if (yych >= '"') goto yy443;
		} else {
			if (yych == '\\') goto yy444;
		}
	}
	++cur;
yy440:
#line 709 "../src/parse/lexer.re"
	{ goto loop_dquote; }
#line 3789 "src/parse/lexer.cc"
yy441:
	++cur;
#line 708 "../src/parse/lexer.re"
	{ next_line(); goto loop_dquote; }
#line 3794 "src/parse/lexer.cc"
yy442:
	yych = *++cur;
	if (yych == '\n') goto yy441;
	goto yy440;
yy443:
	++cur;
#line 706 "../src/parse/lexer.re"
	{ return Ret::OK; }
#line 3803 "src/parse/lexer.cc"
yy444:
	yych = *++cur;
	if (yych == '"') goto yy445;
	if (yych != '\\') goto yy440;
yy445:
	++cur;
#line 707 "../src/parse/lexer.re"
	{ goto loop_dquote; }
#line 3812 "src/parse/lexer.cc"
}
#line 710 "../src/parse/lexer.re"

    } else if (quote == '`') {
        if (!globopts->backtick_quoted_strings) return Ret::OK; // skip
loop_backtick: 
#line 3819 "src/parse/lexer.cc"
{
	uint8_t yych;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '\f') {
		if (yych == '\n') goto yy448;
	} else {
		if (yych <= '\r') goto yy449;
		if (yych == '`') goto yy450;
	}
	++cur;
yy447:
#line 716 "../src/parse/lexer.re"
	{ goto loop_backtick; }
#line 3834 "src/parse/lexer.cc"
yy448:
	++cur;
#line 715 "../src/parse/lexer.re"
	{ next_line(); goto loop_backtick; }
#line 3839 "src/parse/lexer.cc"
yy449:
	yych = *++cur;
	if (yych == '\n') goto yy448;
	goto yy447;
yy450:
	++cur;
#line 714 "../src/parse/lexer.re"
	{ return Ret::OK; }
#line 3848 "src/parse/lexer.cc"
}
#line 717 "../src/parse/lexer.re"

    } else if (quote == '\'') {
        // Single-quoted char literals may contain closing curly brace, e.g. '}'.
        // We must lex all possible forms (not only those with a closing brace), as otherwise we
        // might erroneously lex the closing single quote as the beginning of another literal, e.g.
        // in 'a'}'b' we would recognize '}' as a literal rather than the closing brace of a block.
    
#line 3858 "src/parse/lexer.cc"
{
	uint8_t yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		128, 128,   0,   0,   0,   0,   0,   0, 
		  0, 128, 128, 128, 128, 128, 128,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128, 128, 128, 128, 128, 128,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((lim - cur) < 11) if (!fill(11)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *(mar = cur);
	if (yych <= 0xDF) {
		if (yych <= '\\') {
			if (yych <= '[') goto yy453;
			goto yy455;
		} else {
			if (yych <= 0x7F) goto yy453;
			if (yych >= 0xC2) goto yy456;
		}
	} else {
		if (yych <= 0xF0) {
			if (yych <= 0xE0) goto yy457;
			if (yych <= 0xEF) goto yy458;
			goto yy459;
		} else {
			if (yych <= 0xF3) goto yy460;
			if (yych <= 0xF4) goto yy461;
		}
	}
yy452:
#line 737 "../src/parse/lexer.re"
	{ return globopts->standalone_single_quotes ? Ret::OK : Ret::FAIL; }
#line 3918 "src/parse/lexer.cc"
yy453:
	yych = *++cur;
	if (yych == '\'') goto yy462;
yy454:
	cur = mar;
	goto yy452;
yy455:
	yych = *++cur;
	if (yych <= 'b') {
		if (yych <= '>') {
			if (yych <= '/') {
				if (yych == '\'') goto yy464;
				goto yy454;
			} else {
				if (yych <= '0') goto yy465;
				if (yych <= '7') goto yy466;
				goto yy454;
			}
		} else {
			if (yych <= 'U') {
				if (yych <= '?') goto yy453;
				if (yych <= 'T') goto yy454;
				goto yy467;
			} else {
				if (yych == '\\') goto yy453;
				if (yych <= '`') goto yy454;
				goto yy453;
			}
		}
	} else {
		if (yych <= 'r') {
			if (yych <= 'm') {
				if (yych == 'f') goto yy453;
				goto yy454;
			} else {
				if (yych <= 'n') goto yy453;
				if (yych <= 'o') goto yy468;
				if (yych <= 'q') goto yy454;
				goto yy453;
			}
		} else {
			if (yych <= 'u') {
				if (yych <= 's') goto yy454;
				if (yych <= 't') goto yy453;
				goto yy469;
			} else {
				if (yych <= 'v') goto yy453;
				if (yych == 'x') goto yy470;
				goto yy454;
			}
		}
	}
yy456:
	yych = *++cur;
	if (yych <= 0x7F) goto yy454;
	if (yych <= 0xBF) goto yy453;
	goto yy454;
yy457:
	yych = *++cur;
	if (yych <= 0x9F) goto yy454;
	if (yych <= 0xBF) goto yy456;
	goto yy454;
yy458:
	yych = *++cur;
	if (yych <= 0x7F) goto yy454;
	if (yych <= 0xBF) goto yy456;
	goto yy454;
yy459:
	yych = *++cur;
	if (yych <= 0x8F) goto yy454;
	if (yych <= 0xBF) goto yy458;
	goto yy454;
yy460:
	yych = *++cur;
	if (yych <= 0x7F) goto yy454;
	if (yych <= 0xBF) goto yy458;
	goto yy454;
yy461:
	yych = *++cur;
	if (yych <= 0x7F) goto yy454;
	if (yych <= 0x8F) goto yy458;
	goto yy454;
yy462:
	++cur;
yy463:
#line 734 "../src/parse/lexer.re"
	{ // any UTF-8 encoded Unicode symbol, unescaped
            return Ret::OK;
        }
#line 4008 "src/parse/lexer.cc"
yy464:
	yych = *++cur;
	if (yych == '\'') goto yy462;
	goto yy463;
yy465:
	yych = *++cur;
	if (yych == '\'') goto yy462;
	if (yych <= '/') goto yy454;
	if (yych <= '7') goto yy471;
	goto yy454;
yy466:
	yych = *++cur;
	if (yych <= '/') goto yy454;
	if (yych <= '7') goto yy471;
	goto yy454;
yy467:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy454;
		if (yych <= '9') goto yy472;
		goto yy454;
	} else {
		if (yych <= 'F') goto yy472;
		if (yych <= '`') goto yy454;
		if (yych <= 'f') goto yy472;
		goto yy454;
	}
yy468:
	yych = *++cur;
	if (yych == '{') goto yy473;
	goto yy454;
yy469:
	yych = *++cur;
	if (yych <= 'F') {
		if (yych <= '/') goto yy454;
		if (yych <= '9') goto yy474;
		if (yych <= '@') goto yy454;
		goto yy474;
	} else {
		if (yych <= 'f') {
			if (yych <= '`') goto yy454;
			goto yy474;
		} else {
			if (yych == '{') goto yy475;
			goto yy454;
		}
	}
yy470:
	yych = *++cur;
	if (yych <= 'F') {
		if (yych <= '/') goto yy454;
		if (yych <= '9') goto yy476;
		if (yych <= '@') goto yy454;
		goto yy476;
	} else {
		if (yych <= 'f') {
			if (yych <= '`') goto yy454;
			goto yy476;
		} else {
			if (yych == '{') goto yy475;
			goto yy454;
		}
	}
yy471:
	yych = *++cur;
	if (yych <= '/') goto yy454;
	if (yych <= '7') goto yy453;
	goto yy454;
yy472:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy454;
		if (yych <= '9') goto yy477;
		goto yy454;
	} else {
		if (yych <= 'F') goto yy477;
		if (yych <= '`') goto yy454;
		if (yych <= 'f') goto yy477;
		goto yy454;
	}
yy473:
	yych = *++cur;
	if (yybm[0+yych] & 64) {
		goto yy478;
	}
	goto yy454;
yy474:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy454;
		if (yych <= '9') goto yy479;
		goto yy454;
	} else {
		if (yych <= 'F') goto yy479;
		if (yych <= '`') goto yy454;
		if (yych <= 'f') goto yy479;
		goto yy454;
	}
yy475:
	yych = *++cur;
	if (yych == '}') goto yy454;
	goto yy481;
yy476:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy454;
		if (yych <= '9') goto yy453;
		goto yy454;
	} else {
		if (yych <= 'F') goto yy453;
		if (yych <= '`') goto yy454;
		if (yych <= 'f') goto yy453;
		goto yy454;
	}
yy477:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy454;
		if (yych <= '9') goto yy482;
		goto yy454;
	} else {
		if (yych <= 'F') goto yy482;
		if (yych <= '`') goto yy454;
		if (yych <= 'f') goto yy482;
		goto yy454;
	}
yy478:
	++cur;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 64) {
		goto yy478;
	}
	if (yych == '}') goto yy453;
	goto yy454;
yy479:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy454;
		if (yych <= '9') goto yy476;
		goto yy454;
	} else {
		if (yych <= 'F') goto yy476;
		if (yych <= '`') goto yy454;
		if (yych <= 'f') goto yy476;
		goto yy454;
	}
yy480:
	++cur;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
yy481:
	if (yybm[0+yych] & 128) {
		goto yy480;
	}
	if (yych == '}') goto yy453;
	goto yy454;
yy482:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy454;
		if (yych >= ':') goto yy454;
	} else {
		if (yych <= 'F') goto yy483;
		if (yych <= '`') goto yy454;
		if (yych >= 'g') goto yy454;
	}
yy483:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy454;
		if (yych <= '9') goto yy474;
		goto yy454;
	} else {
		if (yych <= 'F') goto yy474;
		if (yych <= '`') goto yy454;
		if (yych <= 'f') goto yy474;
		goto yy454;
	}
}
#line 738 "../src/parse/lexer.re"

    }
    return Ret::FAIL;
}

Ret Input::lex_c_comment() {
loop: 
#line 4197 "src/parse/lexer.cc"
{
	uint8_t yych;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '\f') {
		if (yych == '\n') goto yy486;
	} else {
		if (yych <= '\r') goto yy487;
		if (yych == '*') goto yy488;
	}
	++cur;
yy485:
#line 747 "../src/parse/lexer.re"
	{ goto loop; }
#line 4212 "src/parse/lexer.cc"
yy486:
	++cur;
#line 746 "../src/parse/lexer.re"
	{ next_line(); goto loop; }
#line 4217 "src/parse/lexer.cc"
yy487:
	yych = *++cur;
	if (yych == '\n') goto yy486;
	goto yy485;
yy488:
	yych = *++cur;
	if (yych != '/') goto yy485;
	++cur;
#line 745 "../src/parse/lexer.re"
	{ return Ret::OK; }
#line 4228 "src/parse/lexer.cc"
}
#line 748 "../src/parse/lexer.re"

}

Ret Input::lex_cpp_comment() {
loop: 
#line 4236 "src/parse/lexer.cc"
{
	uint8_t yych;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych == '\n') goto yy491;
	if (yych == '\r') goto yy492;
	++cur;
yy490:
#line 754 "../src/parse/lexer.re"
	{ goto loop; }
#line 4247 "src/parse/lexer.cc"
yy491:
	++cur;
#line 753 "../src/parse/lexer.re"
	{ next_line(); return Ret::OK; }
#line 4252 "src/parse/lexer.cc"
yy492:
	yych = *++cur;
	if (yych == '\n') goto yy491;
	goto yy490;
}
#line 755 "../src/parse/lexer.re"

}

Ret Input::lex_cls(Ast& ast, bool neg, const AstNode*& a) {
    uint32_t u, l;
    const loc_t& loc0 = tok_loc();
    loc_t loc = cur_loc();
fst:
    tok = cur;

#line 4269 "src/parse/lexer.cc"
{
	uint8_t yych;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych == ']') goto yy494;
#line 766 "../src/parse/lexer.re"
	{ CHECK_RET(lex_cls_chr(l)); goto snd; }
#line 4277 "src/parse/lexer.cc"
yy494:
	++cur;
#line 765 "../src/parse/lexer.re"
	{ a = ast.cls(loc0, neg); return Ret::OK; }
#line 4282 "src/parse/lexer.cc"
}
#line 767 "../src/parse/lexer.re"

snd: 
#line 4287 "src/parse/lexer.cc"
{
	uint8_t yych;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *(mar = cur);
	if (yych == '-') goto yy497;
yy496:
#line 769 "../src/parse/lexer.re"
	{ u = l; goto add; }
#line 4296 "src/parse/lexer.cc"
yy497:
	yych = *++cur;
	if (yych != ']') goto yy498;
	cur = mar;
	goto yy496;
yy498:
	++cur;
	cur -= 1;
#line 770 "../src/parse/lexer.re"
	{
        CHECK_RET(lex_cls_chr(u));
        if (l > u) {
            msg.warn.swapped_range(loc, l, u);
            std::swap(l, u);
        }
        goto add;
    }
#line 4314 "src/parse/lexer.cc"
}
#line 778 "../src/parse/lexer.re"

add:
    ast.temp_ranges.push_back(AstRange(l, u, loc));
    loc = cur_loc();
    goto fst;
}

Ret Input::lex_cls_chr(uint32_t& c) {
    tok = cur;
    const loc_t& loc = cur_loc();
#line 813 "../src/parse/lexer.re"

    if (globopts->input_encoding == Enc::Type::ASCII) {
        
#line 4331 "src/parse/lexer.cc"
{
	uint8_t yych;
	unsigned int yyaccept = 0;
	if ((lim - cur) < 10) if (!fill(10)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '\f') {
		if (yych == '\n') goto yy501;
	} else {
		if (yych <= '\r') goto yy502;
		if (yych == '\\') goto yy503;
	}
	++cur;
yy500:
#line 795 "../src/parse/lexer.re"
	{ c = decode(tok); return Ret::OK; }
#line 4347 "src/parse/lexer.cc"
yy501:
	++cur;
#line 789 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(loc, "newline in character class")); }
#line 4352 "src/parse/lexer.cc"
yy502:
	yych = *++cur;
	if (yych == '\n') goto yy501;
	goto yy500;
yy503:
	yych = *++cur;
	if (yych <= '\\') {
		if (yych <= '/') {
			if (yych <= '\f') {
				if (yych <= 0x00) goto yy504;
				if (yych == '\n') goto yy501;
				goto yy505;
			} else {
				if (yych <= '\r') goto yy507;
				if (yych == '-') goto yy508;
				goto yy505;
			}
		} else {
			if (yych <= 'U') {
				if (yych <= '3') goto yy509;
				if (yych <= '7') goto yy511;
				if (yych <= 'T') goto yy505;
				goto yy512;
			} else {
				if (yych == 'X') goto yy514;
				if (yych <= '[') goto yy505;
				goto yy515;
			}
		}
	} else {
		if (yych <= 'n') {
			if (yych <= 'b') {
				if (yych <= ']') goto yy516;
				if (yych <= '`') goto yy505;
				if (yych <= 'a') goto yy517;
				goto yy518;
			} else {
				if (yych == 'f') goto yy519;
				if (yych <= 'm') goto yy505;
				goto yy520;
			}
		} else {
			if (yych <= 't') {
				if (yych == 'r') goto yy521;
				if (yych <= 's') goto yy505;
				goto yy522;
			} else {
				if (yych <= 'v') {
					if (yych <= 'u') goto yy514;
					goto yy523;
				} else {
					if (yych == 'x') goto yy524;
					goto yy505;
				}
			}
		}
	}
yy504:
#line 792 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(loc, "syntax error in escape sequence")); }
#line 4413 "src/parse/lexer.cc"
yy505:
	++cur;
yy506:
#line 808 "../src/parse/lexer.re"
	{
        msg.warn.useless_escape(loc, tok, cur);
        c = decode(tok + 1);
        return Ret::OK;
    }
#line 4423 "src/parse/lexer.cc"
yy507:
	yych = *++cur;
	if (yych == '\n') goto yy501;
	goto yy506;
yy508:
	++cur;
#line 806 "../src/parse/lexer.re"
	{ c = '-'_u8; return Ret::OK; }
#line 4432 "src/parse/lexer.cc"
yy509:
	yyaccept = 0;
	yych = *(mar = ++cur);
	if (yych <= '/') goto yy510;
	if (yych <= '7') goto yy525;
yy510:
#line 791 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(loc, "syntax error in octal escape sequence")); }
#line 4441 "src/parse/lexer.cc"
yy511:
	++cur;
	goto yy510;
yy512:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy513;
		if (yych <= '9') goto yy527;
	} else {
		if (yych <= 'F') goto yy527;
		if (yych <= '`') goto yy513;
		if (yych <= 'f') goto yy527;
	}
yy513:
#line 790 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(loc, "syntax error in hexadecimal escape sequence")); }
#line 4459 "src/parse/lexer.cc"
yy514:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy513;
		if (yych <= '9') goto yy528;
		goto yy513;
	} else {
		if (yych <= 'F') goto yy528;
		if (yych <= '`') goto yy513;
		if (yych <= 'f') goto yy528;
		goto yy513;
	}
yy515:
	++cur;
#line 805 "../src/parse/lexer.re"
	{ c = '\\'_u8; return Ret::OK; }
#line 4477 "src/parse/lexer.cc"
yy516:
	++cur;
#line 807 "../src/parse/lexer.re"
	{ c = ']'_u8; return Ret::OK; }
#line 4482 "src/parse/lexer.cc"
yy517:
	++cur;
#line 798 "../src/parse/lexer.re"
	{ c = '\a'_u8; return Ret::OK; }
#line 4487 "src/parse/lexer.cc"
yy518:
	++cur;
#line 799 "../src/parse/lexer.re"
	{ c = '\b'_u8; return Ret::OK; }
#line 4492 "src/parse/lexer.cc"
yy519:
	++cur;
#line 800 "../src/parse/lexer.re"
	{ c = '\f'_u8; return Ret::OK; }
#line 4497 "src/parse/lexer.cc"
yy520:
	++cur;
#line 801 "../src/parse/lexer.re"
	{ c = '\n'_u8; return Ret::OK; }
#line 4502 "src/parse/lexer.cc"
yy521:
	++cur;
#line 802 "../src/parse/lexer.re"
	{ c = '\r'_u8; return Ret::OK; }
#line 4507 "src/parse/lexer.cc"
yy522:
	++cur;
#line 803 "../src/parse/lexer.re"
	{ c = '\t'_u8; return Ret::OK; }
#line 4512 "src/parse/lexer.cc"
yy523:
	++cur;
#line 804 "../src/parse/lexer.re"
	{ c = '\v'_u8; return Ret::OK; }
#line 4517 "src/parse/lexer.cc"
yy524:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy513;
		if (yych <= '9') goto yy529;
		goto yy513;
	} else {
		if (yych <= 'F') goto yy529;
		if (yych <= '`') goto yy513;
		if (yych <= 'f') goto yy529;
		goto yy513;
	}
yy525:
	yych = *++cur;
	if (yych <= '/') goto yy526;
	if (yych <= '7') goto yy530;
yy526:
	cur = mar;
	if (yyaccept == 0) {
		goto yy510;
	} else {
		goto yy513;
	}
yy527:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy526;
		if (yych <= '9') goto yy531;
		goto yy526;
	} else {
		if (yych <= 'F') goto yy531;
		if (yych <= '`') goto yy526;
		if (yych <= 'f') goto yy531;
		goto yy526;
	}
yy528:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy526;
		if (yych <= '9') goto yy532;
		goto yy526;
	} else {
		if (yych <= 'F') goto yy532;
		if (yych <= '`') goto yy526;
		if (yych <= 'f') goto yy532;
		goto yy526;
	}
yy529:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy526;
		if (yych <= '9') goto yy533;
		goto yy526;
	} else {
		if (yych <= 'F') goto yy533;
		if (yych <= '`') goto yy526;
		if (yych <= 'f') goto yy533;
		goto yy526;
	}
yy530:
	++cur;
#line 797 "../src/parse/lexer.re"
	{ c = unesc_oct(tok, cur); return Ret::OK; }
#line 4582 "src/parse/lexer.cc"
yy531:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy526;
		if (yych <= '9') goto yy534;
		goto yy526;
	} else {
		if (yych <= 'F') goto yy534;
		if (yych <= '`') goto yy526;
		if (yych <= 'f') goto yy534;
		goto yy526;
	}
yy532:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy526;
		if (yych <= '9') goto yy529;
		goto yy526;
	} else {
		if (yych <= 'F') goto yy529;
		if (yych <= '`') goto yy526;
		if (yych <= 'f') goto yy529;
		goto yy526;
	}
yy533:
	++cur;
#line 796 "../src/parse/lexer.re"
	{ c = unesc_hex(tok, cur); return Ret::OK; }
#line 4611 "src/parse/lexer.cc"
yy534:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy526;
		if (yych >= ':') goto yy526;
	} else {
		if (yych <= 'F') goto yy535;
		if (yych <= '`') goto yy526;
		if (yych >= 'g') goto yy526;
	}
yy535:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy526;
		if (yych <= '9') goto yy528;
		goto yy526;
	} else {
		if (yych <= 'F') goto yy528;
		if (yych <= '`') goto yy526;
		if (yych <= 'f') goto yy528;
		goto yy526;
	}
}
#line 815 "../src/parse/lexer.re"

    } else {
        
#line 4639 "src/parse/lexer.cc"
{
	uint8_t yych;
	unsigned int yyaccept = 0;
	if ((lim - cur) < 10) if (!fill(10)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x7F) {
		if (yych <= '\f') {
			if (yych == '\n') goto yy539;
		} else {
			if (yych <= '\r') goto yy540;
			if (yych == '\\') goto yy541;
		}
	} else {
		if (yych <= 0xEF) {
			if (yych <= 0xC1) goto yy543;
			if (yych <= 0xDF) goto yy545;
			if (yych <= 0xE0) goto yy546;
			goto yy547;
		} else {
			if (yych <= 0xF0) goto yy548;
			if (yych <= 0xF3) goto yy549;
			if (yych <= 0xF4) goto yy550;
			goto yy543;
		}
	}
yy537:
	++cur;
yy538:
#line 795 "../src/parse/lexer.re"
	{ c = decode(tok); return Ret::OK; }
#line 4670 "src/parse/lexer.cc"
yy539:
	++cur;
#line 789 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(loc, "newline in character class")); }
#line 4675 "src/parse/lexer.cc"
yy540:
	yych = *++cur;
	if (yych == '\n') goto yy539;
	goto yy538;
yy541:
	yyaccept = 0;
	yych = *(mar = ++cur);
	if (yych <= 'b') {
		if (yych <= '7') {
			if (yych <= '\r') {
				if (yych <= '\t') {
					if (yych >= 0x01) goto yy551;
				} else {
					if (yych <= '\n') goto yy539;
					if (yych <= '\f') goto yy551;
					goto yy553;
				}
			} else {
				if (yych <= '-') {
					if (yych <= ',') goto yy551;
					goto yy554;
				} else {
					if (yych <= '/') goto yy551;
					if (yych <= '3') goto yy555;
					goto yy557;
				}
			}
		} else {
			if (yych <= '[') {
				if (yych <= 'U') {
					if (yych <= 'T') goto yy551;
					goto yy558;
				} else {
					if (yych == 'X') goto yy560;
					goto yy551;
				}
			} else {
				if (yych <= ']') {
					if (yych <= '\\') goto yy561;
					goto yy562;
				} else {
					if (yych <= '`') goto yy551;
					if (yych <= 'a') goto yy563;
					goto yy564;
				}
			}
		}
	} else {
		if (yych <= 'v') {
			if (yych <= 'q') {
				if (yych <= 'f') {
					if (yych <= 'e') goto yy551;
					goto yy565;
				} else {
					if (yych == 'n') goto yy566;
					goto yy551;
				}
			} else {
				if (yych <= 's') {
					if (yych <= 'r') goto yy567;
					goto yy551;
				} else {
					if (yych <= 't') goto yy568;
					if (yych <= 'u') goto yy560;
					goto yy569;
				}
			}
		} else {
			if (yych <= 0xDF) {
				if (yych <= 'x') {
					if (yych <= 'w') goto yy551;
					goto yy570;
				} else {
					if (yych <= 0x7F) goto yy551;
					if (yych >= 0xC2) goto yy571;
				}
			} else {
				if (yych <= 0xF0) {
					if (yych <= 0xE0) goto yy573;
					if (yych <= 0xEF) goto yy574;
					goto yy575;
				} else {
					if (yych <= 0xF3) goto yy576;
					if (yych <= 0xF4) goto yy577;
				}
			}
		}
	}
yy542:
#line 792 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(loc, "syntax error in escape sequence")); }
#line 4767 "src/parse/lexer.cc"
yy543:
	++cur;
yy544:
#line 793 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(loc, "syntax error")); }
#line 4773 "src/parse/lexer.cc"
yy545:
	yych = *++cur;
	if (yych <= 0x7F) goto yy544;
	if (yych <= 0xBF) goto yy537;
	goto yy544;
yy546:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= 0x9F) goto yy544;
	if (yych <= 0xBF) goto yy578;
	goto yy544;
yy547:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= 0x7F) goto yy544;
	if (yych <= 0xBF) goto yy578;
	goto yy544;
yy548:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= 0x8F) goto yy544;
	if (yych <= 0xBF) goto yy579;
	goto yy544;
yy549:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= 0x7F) goto yy544;
	if (yych <= 0xBF) goto yy579;
	goto yy544;
yy550:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= 0x7F) goto yy544;
	if (yych <= 0x8F) goto yy579;
	goto yy544;
yy551:
	++cur;
yy552:
#line 808 "../src/parse/lexer.re"
	{
        msg.warn.useless_escape(loc, tok, cur);
        c = decode(tok + 1);
        return Ret::OK;
    }
#line 4818 "src/parse/lexer.cc"
yy553:
	yych = *++cur;
	if (yych == '\n') goto yy539;
	goto yy552;
yy554:
	++cur;
#line 806 "../src/parse/lexer.re"
	{ c = '-'_u8; return Ret::OK; }
#line 4827 "src/parse/lexer.cc"
yy555:
	yyaccept = 2;
	yych = *(mar = ++cur);
	if (yych <= '/') goto yy556;
	if (yych <= '7') goto yy580;
yy556:
#line 791 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(loc, "syntax error in octal escape sequence")); }
#line 4836 "src/parse/lexer.cc"
yy557:
	++cur;
	goto yy556;
yy558:
	yyaccept = 3;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy559;
		if (yych <= '9') goto yy581;
	} else {
		if (yych <= 'F') goto yy581;
		if (yych <= '`') goto yy559;
		if (yych <= 'f') goto yy581;
	}
yy559:
#line 790 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(loc, "syntax error in hexadecimal escape sequence")); }
#line 4854 "src/parse/lexer.cc"
yy560:
	yyaccept = 3;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy559;
		if (yych <= '9') goto yy582;
		goto yy559;
	} else {
		if (yych <= 'F') goto yy582;
		if (yych <= '`') goto yy559;
		if (yych <= 'f') goto yy582;
		goto yy559;
	}
yy561:
	++cur;
#line 805 "../src/parse/lexer.re"
	{ c = '\\'_u8; return Ret::OK; }
#line 4872 "src/parse/lexer.cc"
yy562:
	++cur;
#line 807 "../src/parse/lexer.re"
	{ c = ']'_u8; return Ret::OK; }
#line 4877 "src/parse/lexer.cc"
yy563:
	++cur;
#line 798 "../src/parse/lexer.re"
	{ c = '\a'_u8; return Ret::OK; }
#line 4882 "src/parse/lexer.cc"
yy564:
	++cur;
#line 799 "../src/parse/lexer.re"
	{ c = '\b'_u8; return Ret::OK; }
#line 4887 "src/parse/lexer.cc"
yy565:
	++cur;
#line 800 "../src/parse/lexer.re"
	{ c = '\f'_u8; return Ret::OK; }
#line 4892 "src/parse/lexer.cc"
yy566:
	++cur;
#line 801 "../src/parse/lexer.re"
	{ c = '\n'_u8; return Ret::OK; }
#line 4897 "src/parse/lexer.cc"
yy567:
	++cur;
#line 802 "../src/parse/lexer.re"
	{ c = '\r'_u8; return Ret::OK; }
#line 4902 "src/parse/lexer.cc"
yy568:
	++cur;
#line 803 "../src/parse/lexer.re"
	{ c = '\t'_u8; return Ret::OK; }
#line 4907 "src/parse/lexer.cc"
yy569:
	++cur;
#line 804 "../src/parse/lexer.re"
	{ c = '\v'_u8; return Ret::OK; }
#line 4912 "src/parse/lexer.cc"
yy570:
	yyaccept = 3;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy559;
		if (yych <= '9') goto yy583;
		goto yy559;
	} else {
		if (yych <= 'F') goto yy583;
		if (yych <= '`') goto yy559;
		if (yych <= 'f') goto yy583;
		goto yy559;
	}
yy571:
	yych = *++cur;
	if (yych <= 0x7F) goto yy572;
	if (yych <= 0xBF) goto yy551;
yy572:
	cur = mar;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy542;
		} else {
			goto yy544;
		}
	} else {
		if (yyaccept == 2) {
			goto yy556;
		} else {
			goto yy559;
		}
	}
yy573:
	yych = *++cur;
	if (yych <= 0x9F) goto yy572;
	if (yych <= 0xBF) goto yy571;
	goto yy572;
yy574:
	yych = *++cur;
	if (yych <= 0x7F) goto yy572;
	if (yych <= 0xBF) goto yy571;
	goto yy572;
yy575:
	yych = *++cur;
	if (yych <= 0x8F) goto yy572;
	if (yych <= 0xBF) goto yy574;
	goto yy572;
yy576:
	yych = *++cur;
	if (yych <= 0x7F) goto yy572;
	if (yych <= 0xBF) goto yy574;
	goto yy572;
yy577:
	yych = *++cur;
	if (yych <= 0x7F) goto yy572;
	if (yych <= 0x8F) goto yy574;
	goto yy572;
yy578:
	yych = *++cur;
	if (yych <= 0x7F) goto yy572;
	if (yych <= 0xBF) goto yy537;
	goto yy572;
yy579:
	yych = *++cur;
	if (yych <= 0x7F) goto yy572;
	if (yych <= 0xBF) goto yy578;
	goto yy572;
yy580:
	yych = *++cur;
	if (yych <= '/') goto yy572;
	if (yych <= '7') goto yy584;
	goto yy572;
yy581:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy572;
		if (yych <= '9') goto yy585;
		goto yy572;
	} else {
		if (yych <= 'F') goto yy585;
		if (yych <= '`') goto yy572;
		if (yych <= 'f') goto yy585;
		goto yy572;
	}
yy582:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy572;
		if (yych <= '9') goto yy586;
		goto yy572;
	} else {
		if (yych <= 'F') goto yy586;
		if (yych <= '`') goto yy572;
		if (yych <= 'f') goto yy586;
		goto yy572;
	}
yy583:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy572;
		if (yych <= '9') goto yy587;
		goto yy572;
	} else {
		if (yych <= 'F') goto yy587;
		if (yych <= '`') goto yy572;
		if (yych <= 'f') goto yy587;
		goto yy572;
	}
yy584:
	++cur;
#line 797 "../src/parse/lexer.re"
	{ c = unesc_oct(tok, cur); return Ret::OK; }
#line 5025 "src/parse/lexer.cc"
yy585:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy572;
		if (yych <= '9') goto yy588;
		goto yy572;
	} else {
		if (yych <= 'F') goto yy588;
		if (yych <= '`') goto yy572;
		if (yych <= 'f') goto yy588;
		goto yy572;
	}
yy586:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy572;
		if (yych <= '9') goto yy583;
		goto yy572;
	} else {
		if (yych <= 'F') goto yy583;
		if (yych <= '`') goto yy572;
		if (yych <= 'f') goto yy583;
		goto yy572;
	}
yy587:
	++cur;
#line 796 "../src/parse/lexer.re"
	{ c = unesc_hex(tok, cur); return Ret::OK; }
#line 5054 "src/parse/lexer.cc"
yy588:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy572;
		if (yych >= ':') goto yy572;
	} else {
		if (yych <= 'F') goto yy589;
		if (yych <= '`') goto yy572;
		if (yych >= 'g') goto yy572;
	}
yy589:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy572;
		if (yych <= '9') goto yy582;
		goto yy572;
	} else {
		if (yych <= 'F') goto yy582;
		if (yych <= '`') goto yy572;
		if (yych <= 'f') goto yy582;
		goto yy572;
	}
}
#line 817 "../src/parse/lexer.re"

    }
}

Ret Input::lex_str_chr(uint8_t quote, AstChar& ast, bool& stop) {
    tok = cur;
    stop = false;
    ast.loc = cur_loc();
#line 848 "../src/parse/lexer.re"

    if (globopts->input_encoding == Enc::Type::ASCII) {
        
#line 5091 "src/parse/lexer.cc"
{
	uint8_t yych;
	unsigned int yyaccept = 0;
	if ((lim - cur) < 10) if (!fill(10)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '\f') {
		if (yych == '\n') goto yy592;
	} else {
		if (yych <= '\r') goto yy593;
		if (yych == '\\') goto yy594;
	}
	++cur;
yy591:
#line 832 "../src/parse/lexer.re"
	{ ast.chr = decode(tok); stop = (tok[0] == quote); return Ret::OK; }
#line 5107 "src/parse/lexer.cc"
yy592:
	++cur;
#line 826 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(ast.loc, "newline in character string")); }
#line 5112 "src/parse/lexer.cc"
yy593:
	yych = *++cur;
	if (yych == '\n') goto yy592;
	goto yy591;
yy594:
	yych = *++cur;
	if (yych <= '`') {
		if (yych <= '3') {
			if (yych <= '\n') {
				if (yych <= 0x00) goto yy595;
				if (yych <= '\t') goto yy596;
				goto yy592;
			} else {
				if (yych == '\r') goto yy598;
				if (yych <= '/') goto yy596;
				goto yy599;
			}
		} else {
			if (yych <= 'W') {
				if (yych <= '7') goto yy601;
				if (yych == 'U') goto yy602;
				goto yy596;
			} else {
				if (yych <= 'X') goto yy604;
				if (yych == '\\') goto yy605;
				goto yy596;
			}
		}
	} else {
		if (yych <= 'q') {
			if (yych <= 'e') {
				if (yych <= 'a') goto yy606;
				if (yych <= 'b') goto yy607;
				goto yy596;
			} else {
				if (yych <= 'f') goto yy608;
				if (yych == 'n') goto yy609;
				goto yy596;
			}
		} else {
			if (yych <= 'u') {
				if (yych <= 'r') goto yy610;
				if (yych <= 's') goto yy596;
				if (yych <= 't') goto yy611;
				goto yy604;
			} else {
				if (yych <= 'v') goto yy612;
				if (yych == 'x') goto yy613;
				goto yy596;
			}
		}
	}
yy595:
#line 829 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(ast.loc, "syntax error in escape sequence")); }
#line 5168 "src/parse/lexer.cc"
yy596:
	++cur;
yy597:
#line 843 "../src/parse/lexer.re"
	{
        ast.chr = decode(tok + 1);
        if (tok[1] != quote) msg.warn.useless_escape(ast.loc, tok, cur);
        return Ret::OK;
    }
#line 5178 "src/parse/lexer.cc"
yy598:
	yych = *++cur;
	if (yych == '\n') goto yy592;
	goto yy597;
yy599:
	yyaccept = 0;
	yych = *(mar = ++cur);
	if (yych <= '/') goto yy600;
	if (yych <= '7') goto yy614;
yy600:
#line 828 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(ast.loc, "syntax error in octal escape sequence")); }
#line 5191 "src/parse/lexer.cc"
yy601:
	++cur;
	goto yy600;
yy602:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy603;
		if (yych <= '9') goto yy616;
	} else {
		if (yych <= 'F') goto yy616;
		if (yych <= '`') goto yy603;
		if (yych <= 'f') goto yy616;
	}
yy603:
#line 827 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(ast.loc, "syntax error in hexadecimal escape sequence")); }
#line 5209 "src/parse/lexer.cc"
yy604:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy603;
		if (yych <= '9') goto yy617;
		goto yy603;
	} else {
		if (yych <= 'F') goto yy617;
		if (yych <= '`') goto yy603;
		if (yych <= 'f') goto yy617;
		goto yy603;
	}
yy605:
	++cur;
#line 842 "../src/parse/lexer.re"
	{ ast.chr = '\\'_u8; return Ret::OK; }
#line 5227 "src/parse/lexer.cc"
yy606:
	++cur;
#line 835 "../src/parse/lexer.re"
	{ ast.chr = '\a'_u8; return Ret::OK; }
#line 5232 "src/parse/lexer.cc"
yy607:
	++cur;
#line 836 "../src/parse/lexer.re"
	{ ast.chr = '\b'_u8; return Ret::OK; }
#line 5237 "src/parse/lexer.cc"
yy608:
	++cur;
#line 837 "../src/parse/lexer.re"
	{ ast.chr = '\f'_u8; return Ret::OK; }
#line 5242 "src/parse/lexer.cc"
yy609:
	++cur;
#line 838 "../src/parse/lexer.re"
	{ ast.chr = '\n'_u8; return Ret::OK; }
#line 5247 "src/parse/lexer.cc"
yy610:
	++cur;
#line 839 "../src/parse/lexer.re"
	{ ast.chr = '\r'_u8; return Ret::OK; }
#line 5252 "src/parse/lexer.cc"
yy611:
	++cur;
#line 840 "../src/parse/lexer.re"
	{ ast.chr = '\t'_u8; return Ret::OK; }
#line 5257 "src/parse/lexer.cc"
yy612:
	++cur;
#line 841 "../src/parse/lexer.re"
	{ ast.chr = '\v'_u8; return Ret::OK; }
#line 5262 "src/parse/lexer.cc"
yy613:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy603;
		if (yych <= '9') goto yy618;
		goto yy603;
	} else {
		if (yych <= 'F') goto yy618;
		if (yych <= '`') goto yy603;
		if (yych <= 'f') goto yy618;
		goto yy603;
	}
yy614:
	yych = *++cur;
	if (yych <= '/') goto yy615;
	if (yych <= '7') goto yy619;
yy615:
	cur = mar;
	if (yyaccept == 0) {
		goto yy600;
	} else {
		goto yy603;
	}
yy616:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy615;
		if (yych <= '9') goto yy620;
		goto yy615;
	} else {
		if (yych <= 'F') goto yy620;
		if (yych <= '`') goto yy615;
		if (yych <= 'f') goto yy620;
		goto yy615;
	}
yy617:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy615;
		if (yych <= '9') goto yy621;
		goto yy615;
	} else {
		if (yych <= 'F') goto yy621;
		if (yych <= '`') goto yy615;
		if (yych <= 'f') goto yy621;
		goto yy615;
	}
yy618:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy615;
		if (yych <= '9') goto yy622;
		goto yy615;
	} else {
		if (yych <= 'F') goto yy622;
		if (yych <= '`') goto yy615;
		if (yych <= 'f') goto yy622;
		goto yy615;
	}
yy619:
	++cur;
#line 834 "../src/parse/lexer.re"
	{ ast.chr = unesc_oct(tok, cur); return Ret::OK; }
#line 5327 "src/parse/lexer.cc"
yy620:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy615;
		if (yych <= '9') goto yy623;
		goto yy615;
	} else {
		if (yych <= 'F') goto yy623;
		if (yych <= '`') goto yy615;
		if (yych <= 'f') goto yy623;
		goto yy615;
	}
yy621:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy615;
		if (yych <= '9') goto yy618;
		goto yy615;
	} else {
		if (yych <= 'F') goto yy618;
		if (yych <= '`') goto yy615;
		if (yych <= 'f') goto yy618;
		goto yy615;
	}
yy622:
	++cur;
#line 833 "../src/parse/lexer.re"
	{ ast.chr = unesc_hex(tok, cur); return Ret::OK; }
#line 5356 "src/parse/lexer.cc"
yy623:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy615;
		if (yych >= ':') goto yy615;
	} else {
		if (yych <= 'F') goto yy624;
		if (yych <= '`') goto yy615;
		if (yych >= 'g') goto yy615;
	}
yy624:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy615;
		if (yych <= '9') goto yy617;
		goto yy615;
	} else {
		if (yych <= 'F') goto yy617;
		if (yych <= '`') goto yy615;
		if (yych <= 'f') goto yy617;
		goto yy615;
	}
}
#line 850 "../src/parse/lexer.re"

    } else {
        
#line 5384 "src/parse/lexer.cc"
{
	uint8_t yych;
	unsigned int yyaccept = 0;
	if ((lim - cur) < 10) if (!fill(10)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x7F) {
		if (yych <= '\f') {
			if (yych == '\n') goto yy628;
		} else {
			if (yych <= '\r') goto yy629;
			if (yych == '\\') goto yy630;
		}
	} else {
		if (yych <= 0xEF) {
			if (yych <= 0xC1) goto yy632;
			if (yych <= 0xDF) goto yy634;
			if (yych <= 0xE0) goto yy635;
			goto yy636;
		} else {
			if (yych <= 0xF0) goto yy637;
			if (yych <= 0xF3) goto yy638;
			if (yych <= 0xF4) goto yy639;
			goto yy632;
		}
	}
yy626:
	++cur;
yy627:
#line 832 "../src/parse/lexer.re"
	{ ast.chr = decode(tok); stop = (tok[0] == quote); return Ret::OK; }
#line 5415 "src/parse/lexer.cc"
yy628:
	++cur;
#line 826 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(ast.loc, "newline in character string")); }
#line 5420 "src/parse/lexer.cc"
yy629:
	yych = *++cur;
	if (yych == '\n') goto yy628;
	goto yy627;
yy630:
	yyaccept = 0;
	yych = *(mar = ++cur);
	if (yych <= 'f') {
		if (yych <= 'T') {
			if (yych <= '\f') {
				if (yych <= 0x00) goto yy631;
				if (yych == '\n') goto yy628;
				goto yy640;
			} else {
				if (yych <= '/') {
					if (yych <= '\r') goto yy642;
					goto yy640;
				} else {
					if (yych <= '3') goto yy643;
					if (yych <= '7') goto yy645;
					goto yy640;
				}
			}
		} else {
			if (yych <= '\\') {
				if (yych <= 'W') {
					if (yych <= 'U') goto yy646;
					goto yy640;
				} else {
					if (yych <= 'X') goto yy648;
					if (yych <= '[') goto yy640;
					goto yy649;
				}
			} else {
				if (yych <= 'a') {
					if (yych <= '`') goto yy640;
					goto yy650;
				} else {
					if (yych <= 'b') goto yy651;
					if (yych <= 'e') goto yy640;
					goto yy652;
				}
			}
		}
	} else {
		if (yych <= 'w') {
			if (yych <= 'r') {
				if (yych == 'n') goto yy653;
				if (yych <= 'q') goto yy640;
				goto yy654;
			} else {
				if (yych <= 't') {
					if (yych <= 's') goto yy640;
					goto yy655;
				} else {
					if (yych <= 'u') goto yy648;
					if (yych <= 'v') goto yy656;
					goto yy640;
				}
			}
		} else {
			if (yych <= 0xE0) {
				if (yych <= 0x7F) {
					if (yych <= 'x') goto yy657;
					goto yy640;
				} else {
					if (yych <= 0xC1) goto yy631;
					if (yych <= 0xDF) goto yy658;
					goto yy660;
				}
			} else {
				if (yych <= 0xF0) {
					if (yych <= 0xEF) goto yy661;
					goto yy662;
				} else {
					if (yych <= 0xF3) goto yy663;
					if (yych <= 0xF4) goto yy664;
				}
			}
		}
	}
yy631:
#line 829 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(ast.loc, "syntax error in escape sequence")); }
#line 5505 "src/parse/lexer.cc"
yy632:
	++cur;
yy633:
#line 830 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(ast.loc, "syntax error")); }
#line 5511 "src/parse/lexer.cc"
yy634:
	yych = *++cur;
	if (yych <= 0x7F) goto yy633;
	if (yych <= 0xBF) goto yy626;
	goto yy633;
yy635:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= 0x9F) goto yy633;
	if (yych <= 0xBF) goto yy665;
	goto yy633;
yy636:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= 0x7F) goto yy633;
	if (yych <= 0xBF) goto yy665;
	goto yy633;
yy637:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= 0x8F) goto yy633;
	if (yych <= 0xBF) goto yy666;
	goto yy633;
yy638:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= 0x7F) goto yy633;
	if (yych <= 0xBF) goto yy666;
	goto yy633;
yy639:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= 0x7F) goto yy633;
	if (yych <= 0x8F) goto yy666;
	goto yy633;
yy640:
	++cur;
yy641:
#line 843 "../src/parse/lexer.re"
	{
        ast.chr = decode(tok + 1);
        if (tok[1] != quote) msg.warn.useless_escape(ast.loc, tok, cur);
        return Ret::OK;
    }
#line 5556 "src/parse/lexer.cc"
yy642:
	yych = *++cur;
	if (yych == '\n') goto yy628;
	goto yy641;
yy643:
	yyaccept = 2;
	yych = *(mar = ++cur);
	if (yych <= '/') goto yy644;
	if (yych <= '7') goto yy667;
yy644:
#line 828 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(ast.loc, "syntax error in octal escape sequence")); }
#line 5569 "src/parse/lexer.cc"
yy645:
	++cur;
	goto yy644;
yy646:
	yyaccept = 3;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy647;
		if (yych <= '9') goto yy668;
	} else {
		if (yych <= 'F') goto yy668;
		if (yych <= '`') goto yy647;
		if (yych <= 'f') goto yy668;
	}
yy647:
#line 827 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(ast.loc, "syntax error in hexadecimal escape sequence")); }
#line 5587 "src/parse/lexer.cc"
yy648:
	yyaccept = 3;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy647;
		if (yych <= '9') goto yy669;
		goto yy647;
	} else {
		if (yych <= 'F') goto yy669;
		if (yych <= '`') goto yy647;
		if (yych <= 'f') goto yy669;
		goto yy647;
	}
yy649:
	++cur;
#line 842 "../src/parse/lexer.re"
	{ ast.chr = '\\'_u8; return Ret::OK; }
#line 5605 "src/parse/lexer.cc"
yy650:
	++cur;
#line 835 "../src/parse/lexer.re"
	{ ast.chr = '\a'_u8; return Ret::OK; }
#line 5610 "src/parse/lexer.cc"
yy651:
	++cur;
#line 836 "../src/parse/lexer.re"
	{ ast.chr = '\b'_u8; return Ret::OK; }
#line 5615 "src/parse/lexer.cc"
yy652:
	++cur;
#line 837 "../src/parse/lexer.re"
	{ ast.chr = '\f'_u8; return Ret::OK; }
#line 5620 "src/parse/lexer.cc"
yy653:
	++cur;
#line 838 "../src/parse/lexer.re"
	{ ast.chr = '\n'_u8; return Ret::OK; }
#line 5625 "src/parse/lexer.cc"
yy654:
	++cur;
#line 839 "../src/parse/lexer.re"
	{ ast.chr = '\r'_u8; return Ret::OK; }
#line 5630 "src/parse/lexer.cc"
yy655:
	++cur;
#line 840 "../src/parse/lexer.re"
	{ ast.chr = '\t'_u8; return Ret::OK; }
#line 5635 "src/parse/lexer.cc"
yy656:
	++cur;
#line 841 "../src/parse/lexer.re"
	{ ast.chr = '\v'_u8; return Ret::OK; }
#line 5640 "src/parse/lexer.cc"
yy657:
	yyaccept = 3;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy647;
		if (yych <= '9') goto yy670;
		goto yy647;
	} else {
		if (yych <= 'F') goto yy670;
		if (yych <= '`') goto yy647;
		if (yych <= 'f') goto yy670;
		goto yy647;
	}
yy658:
	yych = *++cur;
	if (yych <= 0x7F) goto yy659;
	if (yych <= 0xBF) goto yy640;
yy659:
	cur = mar;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy631;
		} else {
			goto yy633;
		}
	} else {
		if (yyaccept == 2) {
			goto yy644;
		} else {
			goto yy647;
		}
	}
yy660:
	yych = *++cur;
	if (yych <= 0x9F) goto yy659;
	if (yych <= 0xBF) goto yy658;
	goto yy659;
yy661:
	yych = *++cur;
	if (yych <= 0x7F) goto yy659;
	if (yych <= 0xBF) goto yy658;
	goto yy659;
yy662:
	yych = *++cur;
	if (yych <= 0x8F) goto yy659;
	if (yych <= 0xBF) goto yy661;
	goto yy659;
yy663:
	yych = *++cur;
	if (yych <= 0x7F) goto yy659;
	if (yych <= 0xBF) goto yy661;
	goto yy659;
yy664:
	yych = *++cur;
	if (yych <= 0x7F) goto yy659;
	if (yych <= 0x8F) goto yy661;
	goto yy659;
yy665:
	yych = *++cur;
	if (yych <= 0x7F) goto yy659;
	if (yych <= 0xBF) goto yy626;
	goto yy659;
yy666:
	yych = *++cur;
	if (yych <= 0x7F) goto yy659;
	if (yych <= 0xBF) goto yy665;
	goto yy659;
yy667:
	yych = *++cur;
	if (yych <= '/') goto yy659;
	if (yych <= '7') goto yy671;
	goto yy659;
yy668:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy659;
		if (yych <= '9') goto yy672;
		goto yy659;
	} else {
		if (yych <= 'F') goto yy672;
		if (yych <= '`') goto yy659;
		if (yych <= 'f') goto yy672;
		goto yy659;
	}
yy669:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy659;
		if (yych <= '9') goto yy673;
		goto yy659;
	} else {
		if (yych <= 'F') goto yy673;
		if (yych <= '`') goto yy659;
		if (yych <= 'f') goto yy673;
		goto yy659;
	}
yy670:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy659;
		if (yych <= '9') goto yy674;
		goto yy659;
	} else {
		if (yych <= 'F') goto yy674;
		if (yych <= '`') goto yy659;
		if (yych <= 'f') goto yy674;
		goto yy659;
	}
yy671:
	++cur;
#line 834 "../src/parse/lexer.re"
	{ ast.chr = unesc_oct(tok, cur); return Ret::OK; }
#line 5753 "src/parse/lexer.cc"
yy672:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy659;
		if (yych <= '9') goto yy675;
		goto yy659;
	} else {
		if (yych <= 'F') goto yy675;
		if (yych <= '`') goto yy659;
		if (yych <= 'f') goto yy675;
		goto yy659;
	}
yy673:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy659;
		if (yych <= '9') goto yy670;
		goto yy659;
	} else {
		if (yych <= 'F') goto yy670;
		if (yych <= '`') goto yy659;
		if (yych <= 'f') goto yy670;
		goto yy659;
	}
yy674:
	++cur;
#line 833 "../src/parse/lexer.re"
	{ ast.chr = unesc_hex(tok, cur); return Ret::OK; }
#line 5782 "src/parse/lexer.cc"
yy675:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy659;
		if (yych >= ':') goto yy659;
	} else {
		if (yych <= 'F') goto yy676;
		if (yych <= '`') goto yy659;
		if (yych >= 'g') goto yy659;
	}
yy676:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy659;
		if (yych <= '9') goto yy669;
		goto yy659;
	} else {
		if (yych <= 'F') goto yy669;
		if (yych <= '`') goto yy659;
		if (yych <= 'f') goto yy669;
		goto yy659;
	}
}
#line 852 "../src/parse/lexer.re"

    }
}

Ret Input::lex_str(Ast& ast, uint8_t quote, const AstNode*& a) {
    const loc_t& loc = tok_loc();
    AstChar c;
    bool stop;
    for (;;) {
        CHECK_RET(lex_str_chr(quote, c, stop));
        if (stop) {
            a = ast.str(loc, quote == '\'');
            return Ret::OK;
        }
        ast.temp_chars.push_back(c);
    }
}

Ret Input::set_sourceline() {
sourceline:
    tok = cur;

#line 5829 "src/parse/lexer.cc"
{
	uint8_t yych;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych >= 0x01) goto yy678;
		} else {
			if (yych <= '\n') goto yy680;
			if (yych <= '\f') goto yy678;
			goto yy681;
		}
	} else {
		if (yych <= '"') {
			if (yych <= '!') goto yy678;
			goto yy682;
		} else {
			if (yych <= '0') goto yy678;
			if (yych <= '9') goto yy683;
			goto yy678;
		}
	}
	++cur;
#line 893 "../src/parse/lexer.re"
	{ --cur; return Ret::OK; }
#line 5889 "src/parse/lexer.cc"
yy678:
	++cur;
yy679:
#line 894 "../src/parse/lexer.re"
	{ goto sourceline; }
#line 5895 "src/parse/lexer.cc"
yy680:
	++cur;
#line 892 "../src/parse/lexer.re"
	{ pos = tok = cur; return Ret::OK; }
#line 5900 "src/parse/lexer.cc"
yy681:
	yych = *++cur;
	if (yych == '\n') goto yy680;
	goto yy679;
yy682:
	yych = *(mar = ++cur);
	if (yych <= 0x00) goto yy679;
	if (yych == '\n') goto yy679;
	goto yy685;
yy683:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 64) {
		goto yy683;
	}
#line 874 "../src/parse/lexer.re"
	{
        uint32_t l;
        if (!s_to_u32_unsafe(tok, cur, l)) {
            RET_FAIL(error_at_tok("line number overflow"));
        }
        set_line(l);
        goto sourceline;
    }
#line 5926 "src/parse/lexer.cc"
yy684:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
yy685:
	if (yybm[0+yych] & 128) {
		goto yy684;
	}
	if (yych <= '\n') goto yy686;
	if (yych <= '"') goto yy687;
	goto yy688;
yy686:
	cur = mar;
	goto yy679;
yy687:
	++cur;
#line 883 "../src/parse/lexer.re"
	{
        InputFile &in = get_input();
        std::string &name = in.escaped_name;
        name = escape_backslashes(getstr(tok + 1, cur - 1));
        in.fidx = static_cast<uint32_t>(msg.filenames.size());
        msg.filenames.push_back(name);
        goto sourceline;
    }
#line 5952 "src/parse/lexer.cc"
yy688:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x00) goto yy686;
	if (yych == '\n') goto yy686;
	goto yy684;
}
#line 895 "../src/parse/lexer.re"

}

#undef YYFILL

} // end namespace re2c
