-- Generated by re2c
#1 "haskell/submatch/01_stags.re"
-- re2hs $INPUT -o $OUTPUT
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE OverloadedRecordDot #-}
{-# LANGUAGE RecordWildCards #-}

import Control.Monad (when)
import Data.ByteString as BS

data State = State {
    str :: !BS.ByteString,
    cur :: !Int,
    mar :: !Int,
    
#17 "haskell/submatch/01_stags.hs"

yyt1 :: !Int,
yyt2 :: !Int,
yyt3 :: !Int,
yyt4 :: !Int,
#13 "haskell/submatch/01_stags.re"

    t1 :: !Int,
    t2 :: !Int,
    t3 :: !Int,
    t4 :: !Int,
    t5 :: !Int
} deriving (Show)

data SemVer = SemVer {
    major :: !Int,
    minor :: !Int,
    patch :: !Int
} deriving (Show, Eq)

none :: Int
none = -1

s2n :: BS.ByteString -> Int -> Int -> Int
s2n s i j = f i 0 where
    f k n = if k >= j then n else f (k + 1) (n * 10 + (fromIntegral (BS.index s k) - 48))


#46 "haskell/submatch/01_stags.hs"
yy0 :: State -> Maybe SemVer
yy0 !_s =
    let yych = BS.index _s.str _s.cur in
    case yych of
        _c | 0x30 <= _c && _c <= 0x39 ->
            let _t = _s{yyt1 = _s.cur} in let _s = _t in
            let _t = _s{cur = _s.cur + 1} in let _s = _t in
            yy3 _s
        _c | True ->
            let _t = _s{cur = _s.cur + 1} in let _s = _t in
            yy1 _s

yy1 :: State -> Maybe SemVer
yy1 !_s =
    yy2 _s

yy2 :: State -> Maybe SemVer
yy2 !_s =
#57 "haskell/submatch/01_stags.re"
    Nothing
#67 "haskell/submatch/01_stags.hs"

yy3 :: State -> Maybe SemVer
yy3 !_s =
    let _t = _s{mar = _s.cur} in let _s = _t in
    let yych = BS.index _s.str _s.cur in
    case yych of
        _c | 0x2E == _c ->
            let _t = _s{cur = _s.cur + 1} in let _s = _t in
            yy4 _s
        _c | 0x30 <= _c && _c <= 0x39 ->
            let _t = _s{cur = _s.cur + 1} in let _s = _t in
            yy6 _s
        _c | True ->
            yy2 _s

yy4 :: State -> Maybe SemVer
yy4 !_s =
    let yych = BS.index _s.str _s.cur in
    case yych of
        _c | 0x30 <= _c && _c <= 0x39 ->
            let _t = _s{yyt2 = _s.cur} in let _s = _t in
            let _t = _s{cur = _s.cur + 1} in let _s = _t in
            yy7 _s
        _c | True ->
            yy5 _s

yy5 :: State -> Maybe SemVer
yy5 !_s =
    let _t = _s{cur = _s.mar} in let _s = _t in
    yy2 _s

yy6 :: State -> Maybe SemVer
yy6 !_s =
    let yych = BS.index _s.str _s.cur in
    case yych of
        _c | 0x2E == _c ->
            let _t = _s{cur = _s.cur + 1} in let _s = _t in
            yy4 _s
        _c | 0x30 <= _c && _c <= 0x39 ->
            let _t = _s{cur = _s.cur + 1} in let _s = _t in
            yy6 _s
        _c | True ->
            yy5 _s

yy7 :: State -> Maybe SemVer
yy7 !_s =
    let yych = BS.index _s.str _s.cur in
    case yych of
        _c | 0x00 == _c ->
            let _t = _s{yyt3 = _s.cur} in let _s = _t in
            let _t = _s{yyt4 = none} in let _s = _t in
            let _t = _s{cur = _s.cur + 1} in let _s = _t in
            yy8 _s
        _c | 0x2E == _c ->
            let _t = _s{yyt3 = _s.cur} in let _s = _t in
            let _t = _s{cur = _s.cur + 1} in let _s = _t in
            yy9 _s
        _c | 0x30 <= _c && _c <= 0x39 ->
            let _t = _s{cur = _s.cur + 1} in let _s = _t in
            yy7 _s
        _c | True ->
            yy5 _s

yy8 :: State -> Maybe SemVer
yy8 !_s =
    let _t = _s{t1 = _s.yyt1} in let _s = _t in
    let _t = _s{t3 = _s.yyt2} in let _s = _t in
    let _t = _s{t4 = _s.yyt3} in let _s = _t in
    let _t = _s{t5 = _s.yyt4} in let _s = _t in
    let _t = _s{t2 = _s.yyt2} in let _s = _t in
    let _t = if _s.t2 == none then _s else _s{t2 = _s.t2 + (-1)} in let _s = _t in
#50 "haskell/submatch/01_stags.re"
    Just SemVer {
        major = s2n _s.str _s.t1 _s.t2,
        minor = s2n _s.str _s.t3 _s.t4,
        patch = if _s.t5 == none then 0 else s2n _s.str _s.t5 (_s.cur - 1)
    }
#145 "haskell/submatch/01_stags.hs"

yy9 :: State -> Maybe SemVer
yy9 !_s =
    let yych = BS.index _s.str _s.cur in
    case yych of
        _c | 0x30 <= _c && _c <= 0x39 ->
            let _t = _s{yyt4 = _s.cur} in let _s = _t in
            let _t = _s{cur = _s.cur + 1} in let _s = _t in
            yy10 _s
        _c | True ->
            yy5 _s

yy10 :: State -> Maybe SemVer
yy10 !_s =
    let yych = BS.index _s.str _s.cur in
    case yych of
        _c | 0x00 == _c ->
            let _t = _s{cur = _s.cur + 1} in let _s = _t in
            yy8 _s
        _c | 0x30 <= _c && _c <= 0x39 ->
            let _t = _s{cur = _s.cur + 1} in let _s = _t in
            yy10 _s
        _c | True ->
            yy5 _s

parse :: State -> Maybe SemVer
parse !_s =
    yy0 _s

#58 "haskell/submatch/01_stags.re"


test :: BS.ByteString -> Maybe SemVer -> IO ()
test str expect = do
    let s = State {
        str = str,
        cur = 0,
        mar = 0,
        
#185 "haskell/submatch/01_stags.hs"

yyt1 = none,
yyt2 = none,
yyt3 = none,
yyt4 = none,
#66 "haskell/submatch/01_stags.re"

        t1 = none,
        t2 = none,
        t3 = none,
        t4 = none,
        t5 = none
    }
    when (parse s /= expect) $ error "failed!"

main :: IO ()
main = do
    test "23.34\0" (Just SemVer {major = 23, minor = 34, patch = 0})
    test "1.2.99999\0" (Just SemVer {major = 1, minor = 2, patch = 99999})
    test "1.a\0" Nothing
