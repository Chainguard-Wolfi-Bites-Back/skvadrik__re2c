-- Generated by re2c
#1 "haskell/submatch/03_posix.re"
-- re2hs $INPUT -o $OUTPUT
{-# OPTIONS_GHC -Wno-unused-record-wildcards #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RecordWildCards #-}

import Control.Monad (when)
import Data.ByteString as BS
import Data.Word

none :: Int
none = -1

data State = State {
    _str :: !BS.ByteString,
    _cur :: !Int,
    _mar :: !Int,
    
#21 "haskell/submatch/03_posix.hs"

_t1 :: !Int,
_t2 :: !Int,
_t3 :: !Int,
_t4 :: !Int,
_t5 :: !Int,
#17 "haskell/submatch/03_posix.re"

    -- use record fields instead of canonical POSIX `yypmatch` array,
    -- as mutable arrays are non-idiomatic in Haskell
    _0 :: !Int,
    _1 :: !Int,
    _2 :: !Int,
    _3 :: !Int,
    _4 :: !Int,
    _5 :: !Int,
    _6 :: !Int,
    _7 :: !Int
} deriving (Show)

data SemVer = SemVer {
    major :: !Int,
    minor :: !Int,
    patch :: !Int
} deriving (Show, Eq)

s2n :: BS.ByteString -> Int -> Int -> Int
s2n s i j = f i 0 where
    f k n = if k >= j then n else f (k + 1) (n * 10 + (fromIntegral (BS.index s k) - 48))


#53 "haskell/submatch/03_posix.hs"
yy0 :: State -> Maybe SemVer
yy0 State{..} =
    let yych = BS.index _str _cur in
    case yych of
        _c | 0x30 <= _c && _c <= 0x39 ->
            let _t1 = _cur in
            let cur = _cur + 1 in let _cur = cur in
            yy3 State{..}
        _c | True ->
            let cur = _cur + 1 in let _cur = cur in
            yy1 State{..}

yy1 :: State -> Maybe SemVer
yy1 State{..} =
    yy2 State{..}

yy2 :: State -> Maybe SemVer
yy2 State{..} =
#68 "haskell/submatch/03_posix.re"
    Nothing
#74 "haskell/submatch/03_posix.hs"

yy3 :: State -> Maybe SemVer
yy3 State{..} =
    let _mar = _cur in
    let yych = BS.index _str _cur in
    case yych of
        _c | 0x2E == _c ->
            let cur = _cur + 1 in let _cur = cur in
            yy4 State{..}
        _c | 0x30 <= _c && _c <= 0x39 ->
            let cur = _cur + 1 in let _cur = cur in
            yy6 State{..}
        _c | True ->
            yy2 State{..}

yy4 :: State -> Maybe SemVer
yy4 State{..} =
    let yych = BS.index _str _cur in
    case yych of
        _c | 0x30 <= _c && _c <= 0x39 ->
            let _t2 = _cur in
            let cur = _cur + 1 in let _cur = cur in
            yy7 State{..}
        _c | True ->
            yy5 State{..}

yy5 :: State -> Maybe SemVer
yy5 State{..} =
    let _cur = _mar in
    yy2 State{..}

yy6 :: State -> Maybe SemVer
yy6 State{..} =
    let yych = BS.index _str _cur in
    case yych of
        _c | 0x2E == _c ->
            let cur = _cur + 1 in let _cur = cur in
            yy4 State{..}
        _c | 0x30 <= _c && _c <= 0x39 ->
            let cur = _cur + 1 in let _cur = cur in
            yy6 State{..}
        _c | True ->
            yy5 State{..}

yy7 :: State -> Maybe SemVer
yy7 State{..} =
    let yych = BS.index _str _cur in
    case yych of
        _c | 0x00 == _c ->
            let _t3 = _cur in
            let _t4 = none in
            let _t5 = none in
            let cur = _cur + 1 in let _cur = cur in
            yy8 State{..}
        _c | 0x2E == _c ->
            let _t3 = _cur in
            let _t5 = _cur in
            let cur = _cur + 1 in let _cur = cur in
            yy9 State{..}
        _c | 0x30 <= _c && _c <= 0x39 ->
            let cur = _cur + 1 in let _cur = cur in
            yy7 State{..}
        _c | True ->
            yy5 State{..}

yy8 :: State -> Maybe SemVer
yy8 State{..} =
    let _2 = _t1 in
    let _4 = _t2 in
    let _5 = _t3 in
    let _6 = _t5 in
    let _7 = _t4 in
    let _0 = _t1 in
    let _1 = _cur in
    let _3 = _t2 in
    let tag = if _3 == none then none else _3 + (-1) in let _3 = tag in
#59 "haskell/submatch/03_posix.re"
    -- Even `yypmatch` values are for opening parentheses, odd values
    -- are for closing parentheses, the first group is the whole match.
    Just SemVer {
        major = s2n _str _2 _3,
        minor = s2n _str _4 _5,
        patch = if _6 == none then 0 else s2n _str (_6 + 1) _7
    }
#159 "haskell/submatch/03_posix.hs"

yy9 :: State -> Maybe SemVer
yy9 State{..} =
    let yych = BS.index _str _cur in
    if yych <= 0x00 then yy5 State{..}
    else yy11 State{..} yych

yy10 :: State -> Maybe SemVer
yy10 State{..} =
    let yych = BS.index _str _cur in
    yy11 State{..} yych

yy11 :: State -> Word8 -> Maybe SemVer
yy11 State{..} yych =
    case yych of
        _c | 0x00 == _c ->
            let _t4 = _cur in
            let cur = _cur + 1 in let _cur = cur in
            yy8 State{..}
        _c | 0x30 <= _c && _c <= 0x39 ->
            let cur = _cur + 1 in let _cur = cur in
            yy10 State{..}
        _c | True ->
            yy5 State{..}

parse :: State -> Maybe SemVer
parse State{..} =
    yy0 State{..}

#69 "haskell/submatch/03_posix.re"


test :: BS.ByteString -> Maybe SemVer -> IO ()
test str expect = do
    let s = State {
        _str = str,
        _cur = 0,
        _mar = 0,
        
#199 "haskell/submatch/03_posix.hs"

_t1 = none,
_t2 = none,
_t3 = none,
_t4 = none,
_t5 = none,
#77 "haskell/submatch/03_posix.re"

        _0 = none,
        _1 = none,
        _2 = none,
        _3 = none,
        _4 = none,
        _5 = none,
        _6 = none,
        _7 = none
    }
    when (parse s /= expect) $ error "failed!"

main :: IO ()
main = do
    test "23.34\0" (Just SemVer {major = 23, minor = 34, patch = 0})
    test "1.2.99999\0" (Just SemVer {major = 1, minor = 2, patch = 99999})
    test "1.a\0" Nothing
