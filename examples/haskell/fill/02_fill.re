-- re2hs $INPUT -o $OUTPUT
{-# LANGUAGE OverloadedRecordDot #-}
{-# LANGUAGE OverloadedStrings #-}

import Control.Monad
import Data.ByteString as BS
import GHC.IO.Handle
import System.Directory
import System.IO

chunk_size :: Int
chunk_size = 4096

data State = State {
    file :: !Handle,
    buf :: !BS.ByteString,
    cur :: !Int,
    lim :: !Int,
    tok :: !Int,
    eof :: !Bool
} deriving (Show)

/*!re2c
    re2c:define:YYFN    = ["lexer;IO Int", "_st;State;!", "_count;Int;!"];
    re2c:define:YYCTYPE = "Word8";
    re2c:define:YYPEEK  = "return $ BS.index _st.buf _st.cur";
    re2c:define:YYSKIP  = "_st <- return _st{cur = _st.cur + 1}";
    re2c:define:YYFILL  = "_st <- fill _st @@";
    re2c:monadic = 1;

    // We have to turn off autogenerated YFILL check and write it manually as part of YYFILL
    // implementation, so that we can propagate the updated state out of it.
    re2c:yyfill:check = 0;

    str = ['] ([^'\\] | [\\][^])* ['];

    *      { return (-1) }
    [\x00] { return $ if _st.cur == _st.lim - yymaxfill + 1 then _count else (-1) }
    str    { lexer _st{tok = _st.cur} (_count + 1) }
    [ ]+   { lexer _st{tok = _st.cur} _count }
*/

yymaxfill :: Int
/*!max:re2c*/

fill :: State -> Int -> IO State
fill !st !need =
    if (st.lim - st.cur >= need) then
        return st
    else case st.eof of
        True -> error "fill failed"
        False -> do
            -- Discard everything up to the current token, cut off terminating null,
            -- read new chunk from file and reappend terminating null at the end.
            chunk <- BS.hGet st.file chunk_size
            let !eof' = BS.length chunk < need -- end of file ?
            let !buf' = BS.concat
                    [ BS.drop st.tok st.buf
                    , chunk
                    , if eof' then (BS.replicate yymaxfill 0) else BS.empty
                    ]
            return st {
                buf = buf',
                cur = st.cur - st.tok,
                lim = BS.length buf',
                tok = 0,
                eof = eof'
            }

main :: IO ()
main = do
    let fname = "input"

    -- Prepare input file.
    BS.writeFile fname $ BS.concat ["'qu\0tes' 'are' 'fine: \\'' " | _ <- [1..chunk_size]]
    let expect = 3 * chunk_size -- the total number of strings in file

    -- Run lexer on the prepared file.
    fh <- openFile fname ReadMode
    let st = State {
        file = fh,
        buf = BS.empty,
        cur = 0,
        tok = 0,
        lim = 0,
        eof = False
    }
    result <- lexer st 0
    hClose fh

    -- Cleanup.
    removeFile fname

    -- Check result.
    when (result /= expect) $ error $ "expected " ++ show expect ++ ", got " ++ show result
    return ()
