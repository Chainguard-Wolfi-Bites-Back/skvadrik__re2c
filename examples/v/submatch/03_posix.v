// Code generated by re2c, DO NOT EDIT.
//line "v/submatch/03_posix.re":1
// re2v $INPUT -o $OUTPUT

// Maximum number of capturing groups among all rules.
//line "v/submatch/03_posix.v":7
const yymaxnmatch = 4
//line "v/submatch/03_posix.re":4


struct SemVer {
    major int
    minor int
    patch int
}

fn s2n(s string) int { // convert pre-parsed string to number
    mut n := 0
    for c in s { n = n * 10 + int(c - 48) }
    return n
}

fn parse(str string) ?SemVer {
    mut cur, mut mar := 0, 0

    // Allocate memory for capturing parentheses (twice the number of groups).
    mut yypmatch := []int{len: yymaxnmatch * 2}
    mut yynmatch := 0

    // Autogenerated tag variables used by the lexer to track tag values.
    
//line "v/submatch/03_posix.v":33
	mut yyt1 := 0
	mut yyt2 := 0
	mut yyt3 := 0
	mut yyt4 := 0
	mut yyt5 := 0
//line "v/submatch/03_posix.re":26


    
//line "v/submatch/03_posix.v":43
    mut yych := 0
    yych = str[cur]
    match yych {
        0x30...0x39 {
            yyt1 = cur
            unsafe { goto yy3 }
        }
        else { unsafe { goto yy1 } }
    }
yy1:
    cur += 1
yy2:
//line "v/submatch/03_posix.re":54
    return none
//line "v/submatch/03_posix.v":58
yy3:
    cur += 1
    mar = cur
    yych = str[cur]
    match yych {
        0x2E { unsafe { goto yy4 } }
        0x30...0x39 { unsafe { goto yy6 } }
        else { unsafe { goto yy2 } }
    }
yy4:
    cur += 1
    yych = str[cur]
    match yych {
        0x30...0x39 {
            yyt2 = cur
            unsafe { goto yy7 }
        }
        else { unsafe { goto yy5 } }
    }
yy5:
    cur = mar
    unsafe { goto yy2 }
yy6:
    cur += 1
    yych = str[cur]
    match yych {
        0x2E { unsafe { goto yy4 } }
        0x30...0x39 { unsafe { goto yy6 } }
        else { unsafe { goto yy5 } }
    }
yy7:
    cur += 1
    yych = str[cur]
    match yych {
        0x00 {
            yyt3 = cur
            yyt4 = -1
            yyt5 = -1
            unsafe { goto yy8 }
        }
        0x2E {
            yyt3 = cur
            yyt5 = cur
            unsafe { goto yy9 }
        }
        0x30...0x39 { unsafe { goto yy7 } }
        else { unsafe { goto yy5 } }
    }
yy8:
    cur += 1
    yynmatch = 4
    yypmatch[2] = yyt1
    yypmatch[4] = yyt2
    yypmatch[5] = yyt3
    yypmatch[6] = yyt5
    yypmatch[7] = yyt4
    yypmatch[0] = yyt1
    yypmatch[1] = cur
    yypmatch[3] = yyt2
    yypmatch[3] += -1
//line "v/submatch/03_posix.re":42
    
            // `yynmatch` is the number of capturing groups
            if yynmatch != 4 { panic("expected 4 submatch groups") }

            // Even `yypmatch` values are for opening parentheses, odd values
            // are for closing parentheses, the first group is the whole match.
            return SemVer {
                major: s2n(str[yypmatch[2]..yypmatch[3]]),
                minor: s2n(str[yypmatch[4]..yypmatch[5]]),
                patch: if yypmatch[6] == -1 { 0 } else { s2n(str[yypmatch[6] + 1..yypmatch[7]]) }
            }

//line "v/submatch/03_posix.v":132
yy9:
    cur += 1
    yych = str[cur]
    if yych <= 0x00 {
        unsafe { goto yy5 }
    }
    unsafe { goto yy11 }
yy10:
    cur += 1
    yych = str[cur]
yy11:
    match yych {
        0x00 {
            yyt4 = cur
            unsafe { goto yy8 }
        }
        0x30...0x39 { unsafe { goto yy10 } }
        else { unsafe { goto yy5 } }
    }
//line "v/submatch/03_posix.re":55

}

fn main() {
    test := fn (result ?SemVer, expect ?SemVer) {
        if r := result {
            if e := expect { if r != e { panic("expected $e, got $r") } }
        } else {
            if _ := result { panic("expected none") }
        }
    }
    test(parse("23.34\0"), SemVer{23, 34, 0})
    test(parse("1.2.9999\0"), SemVer{1, 2, 9999})
    test(parse("1.a\0"), none)
}
