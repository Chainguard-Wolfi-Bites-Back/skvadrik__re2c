// Code generated by re2c, DO NOT EDIT.
//line "v/submatch/01_stags.re":1
// re2v $INPUT -o $OUTPUT

struct SemVer {
    major int
    minor int
    patch int
}

fn s2n(s string) int { // convert pre-parsed string to number
    mut n := 0
    for c in s { n = n * 10 + int(c - 48) }
    return n
}

fn parse(str string) ?SemVer {
    mut cur, mut mar := 0, 0

    // User-defined tag variables that are available in semantic action.
    mut t1, mut t2, mut t3, mut t4, mut t5 := 0, 0, 0, 0, 0

    // Autogenerated tag variables used by the lexer to track tag values.
    
//line "v/submatch/01_stags.v":26
mut yyt1 := -1
	mut yyt2 := -1
	mut yyt3 := -1
	mut yyt4 := -1
//line "v/submatch/01_stags.re":22


    
//line "v/submatch/01_stags.v":35
    mut yych := 0
    yych = str[cur]
    match yych {
        0x30...0x39 {
            yyt1 = cur
            unsafe { goto yy3 }
        }
        else { unsafe { goto yy1 } }
    }
yy1:
    cur += 1
yy2:
//line "v/submatch/01_stags.re":45
    return none
//line "v/submatch/01_stags.v":50
yy3:
    cur += 1
    mar = cur
    yych = str[cur]
    match yych {
        0x2E { unsafe { goto yy4 } }
        0x30...0x39 { unsafe { goto yy6 } }
        else { unsafe { goto yy2 } }
    }
yy4:
    cur += 1
    yych = str[cur]
    match yych {
        0x30...0x39 {
            yyt2 = cur
            unsafe { goto yy7 }
        }
        else { unsafe { goto yy5 } }
    }
yy5:
    cur = mar
    unsafe { goto yy2 }
yy6:
    cur += 1
    yych = str[cur]
    match yych {
        0x2E { unsafe { goto yy4 } }
        0x30...0x39 { unsafe { goto yy6 } }
        else { unsafe { goto yy5 } }
    }
yy7:
    cur += 1
    yych = str[cur]
    match yych {
        0x00 {
            yyt3 = cur
            yyt4 = -1
            unsafe { goto yy8 }
        }
        0x2E {
            yyt3 = cur
            unsafe { goto yy9 }
        }
        0x30...0x39 { unsafe { goto yy7 } }
        else { unsafe { goto yy5 } }
    }
yy8:
    cur += 1
    t1 = yyt1
    t3 = yyt2
    t4 = yyt3
    t5 = yyt4
    t2 = yyt2
    t2 += -1
//line "v/submatch/01_stags.re":38
    
            return SemVer{
                major: s2n(str[t1..t2]),
                minor: s2n(str[t3..t4]),
                patch: if t5 == -1 { 0 } else { s2n(str[t5..cur - 1]) }
            }

//line "v/submatch/01_stags.v":113
yy9:
    cur += 1
    yych = str[cur]
    match yych {
        0x30...0x39 {
            yyt4 = cur
            unsafe { goto yy10 }
        }
        else { unsafe { goto yy5 } }
    }
yy10:
    cur += 1
    yych = str[cur]
    match yych {
        0x00 { unsafe { goto yy8 } }
        0x30...0x39 { unsafe { goto yy10 } }
        else { unsafe { goto yy5 } }
    }
//line "v/submatch/01_stags.re":46

}

fn main() {
    test := fn (result ?SemVer, expect ?SemVer) {
        if r := result {
            if e := expect { if r != e { panic("expected $e, got $r") } }
        } else {
            if _ := result { panic("expected none") }
        }
    }
    test(parse("23.34\0"), SemVer{23, 34, 0})
    test(parse("1.2.9999\0"), SemVer{1, 2, 9999})
    test(parse("1.a\0"), none)
}
