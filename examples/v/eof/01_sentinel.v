// Code generated by re2c, DO NOT EDIT.
//line "v/eof/01_sentinel.re":1
// re2v $INPUT -o $OUTPUT

// Expect a null-terminated string.
fn lex(str string) int {
    mut cur := 0
    mut count := 0

loop: 
//line "v/eof/01_sentinel.v":12
    mut yych := 0
    yych = str[cur]
    match yych {
        0x00 { unsafe { goto yy1 } }
        0x20 { unsafe { goto yy3 } }
        0x61...0x7A { unsafe { goto yy5 } }
        else { unsafe { goto yy2 } }
    }
yy1:
    cur += 1
//line "v/eof/01_sentinel.re":15
    return count
//line "v/eof/01_sentinel.v":25
yy2:
    cur += 1
//line "v/eof/01_sentinel.re":14
    return -1
//line "v/eof/01_sentinel.v":30
yy3:
    cur += 1
    yych = str[cur]
    match yych {
        0x20 { unsafe { goto yy3 } }
        else { unsafe { goto yy4 } }
    }
yy4:
//line "v/eof/01_sentinel.re":17
    unsafe { goto loop }
//line "v/eof/01_sentinel.v":41
yy5:
    cur += 1
    yych = str[cur]
    match yych {
        0x61...0x7A { unsafe { goto yy5 } }
        else { unsafe { goto yy6 } }
    }
yy6:
//line "v/eof/01_sentinel.re":16
    count += 1; unsafe { goto loop }
//line "v/eof/01_sentinel.v":52
//line "v/eof/01_sentinel.re":18

}

fn main() {
    assert lex("\0") == 0
    assert lex("one two three\0") == 3
    assert lex("f0ur\0") == -1
}
