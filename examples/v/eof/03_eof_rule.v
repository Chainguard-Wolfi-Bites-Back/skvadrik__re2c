// Code generated by re2c, DO NOT EDIT.
//line "v/eof/03_eof_rule.re":1
// re2v $INPUT -o $OUTPUT

// Expects a null-terminated string.
fn lex(str string) int {
    mut cur, mut mar := 0, 0
    lim := str.len - 1 // lim points at the terminating null
    mut count := 0

loop: 
//line "v/eof/03_eof_rule.v":13
    mut yych := 0
    yych = str[cur]
    match yych {
        0x20 { unsafe { goto yy3 } }
        0x27 { unsafe { goto yy5 } }
        else {
            if lim <= cur {
                unsafe { goto yy10 }
            }
            unsafe { goto yy1 }
        }
    }
yy1:
    cur += 1
yy2:
//line "v/eof/03_eof_rule.re":21
    return -1
//line "v/eof/03_eof_rule.v":31
yy3:
    cur += 1
    yych = str[cur]
    match yych {
        0x20 { unsafe { goto yy3 } }
        else { unsafe { goto yy4 } }
    }
yy4:
//line "v/eof/03_eof_rule.re":24
    unsafe { goto loop }
//line "v/eof/03_eof_rule.v":42
yy5:
    cur += 1
    mar = cur
    yych = str[cur]
    if yych >= 0x01 {
        unsafe { goto yy7 }
    }
    if lim <= cur {
        unsafe { goto yy2 }
    }
yy6:
    cur += 1
    yych = str[cur]
yy7:
    match yych {
        0x27 { unsafe { goto yy8 } }
        0x5C { unsafe { goto yy9 } }
        else {
            if lim <= cur {
                unsafe { goto yy11 }
            }
            unsafe { goto yy6 }
        }
    }
yy8:
    cur += 1
//line "v/eof/03_eof_rule.re":23
    count += 1; unsafe { goto loop }
//line "v/eof/03_eof_rule.v":71
yy9:
    cur += 1
    yych = str[cur]
    if yych <= 0x00 {
        if lim <= cur {
            unsafe { goto yy11 }
        }
        unsafe { goto yy6 }
    }
    unsafe { goto yy6 }
yy10:
//line "v/eof/03_eof_rule.re":22
    return count
//line "v/eof/03_eof_rule.v":85
yy11:
    cur = mar
    unsafe { goto yy2 }
//line "v/eof/03_eof_rule.re":26

}

fn main() {
    assert lex("\0") == 0
    assert lex("'qu\0tes' 'are' 'fine: \\'' \0") == 3
    assert lex("'unterminated\\'\0") == -1
}
