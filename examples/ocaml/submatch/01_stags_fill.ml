(* Generated by re2c *)
#1 "ocaml/submatch/01_stags_fill.re"
(* re2ocaml $INPUT -o $OUTPUT *)

let bufsize = 4096
let none = max_int;

type state = {
    file: in_channel;
    buf: bytes;
    mutable cur: int;
    mutable mar: int;
    mutable tok: int;
    mutable lim: int;
    mutable eof: bool;
    mutable t1: int;
    mutable t2: int;
    mutable t3: int;
    mutable t4: int;
    mutable t5: int;
    
#23 "ocaml/submatch/01_stags_fill.ml"

	mutable yyt1: int;
	mutable yyt2: int;
	mutable yyt3: int;
	mutable yyt4: int;
#19 "ocaml/submatch/01_stags_fill.re"

}

type status = Ok | Eof | LongLexeme

type semver = {
    major: int;
    minor: int;
    patch: int;
}

let s2n (str: bytes) (i1: int) (i2: int) : int =
    let rec f s i j n =
        if i >= j then n else f s (i + 1) j (n * 10 + Char.code (Bytes.get s i) - 48)
    in f str i1 i2 0

let fill(st: state) : status =
    if st.eof then Eof else

    (* Error: lexeme too long. In real life could reallocate a larger buffer. *)
    if st.tok < 1 then LongLexeme else (

    (* Shift buffer contents (discard everything up to the current token). *)
    Bytes.blit st.buf st.tok st.buf 0 (st.lim - st.tok);
    st.cur <- st.cur - st.tok;
    st.mar <- st.mar - st.tok;
    st.lim <- st.lim - st.tok;
    
#58 "ocaml/submatch/01_stags_fill.ml"

	st.yyt1 <- if st.yyt1 = none then none else st.yyt1 - st.tok;
	st.yyt2 <- if st.yyt2 = none then none else st.yyt2 - st.tok;
	st.yyt3 <- if st.yyt3 = none then none else st.yyt3 - st.tok;
	st.yyt4 <- if st.yyt4 = none then none else st.yyt4 - st.tok;
#46 "ocaml/submatch/01_stags_fill.re"

    st.tok <- 0;

    (* Fill free space at the end of buffer with new data from file. *)
    let n = input st.file st.buf st.lim (bufsize - st.lim - 1) in (* -1 for sentinel *)
    st.lim <- st.lim + n;
    if n = 0 then
        st.eof <- true; (* end of file *)
        Bytes.set st.buf st.lim '\x00'; (* append sentinel *)

    Ok)


#78 "ocaml/submatch/01_stags_fill.ml"
let rec yy0 (st : state) (vers : semver list) : (semver list) option =
	let yych = Bytes.get st.buf st.cur in
	match yych with
		| '0'..'9' ->
			st.yyt1 <- st.cur;
			st.cur <- st.cur + 1;
			(yy3 [@tailcall]) st vers
		| _ ->
			if (st.cur >= st.lim) then (
				if (fill st = Ok) then (yy0 [@tailcall]) st vers
				else (yy11 [@tailcall]) st vers
			) else (
				st.cur <- st.cur + 1;
				(yy1 [@tailcall]) st vers
			)

and yy1 (st : state) (vers : semver list) : (semver list) option =
	(yy2 [@tailcall]) st vers

and yy2 (st : state) (vers : semver list) : (semver list) option =
#84 "ocaml/submatch/01_stags_fill.re"
	None
#101 "ocaml/submatch/01_stags_fill.ml"

and yy3 (st : state) (vers : semver list) : (semver list) option =
	st.mar <- st.cur;
	let yych = Bytes.get st.buf st.cur in
	match yych with
		| '.' ->
			st.cur <- st.cur + 1;
			(yy4 [@tailcall]) st vers
		| '0'..'9' ->
			st.cur <- st.cur + 1;
			(yy6 [@tailcall]) st vers
		| _ ->
			if (st.cur >= st.lim) then (
				if (fill st = Ok) then (yy3 [@tailcall]) st vers
				else (yy2 [@tailcall]) st vers
			) else (
				(yy2 [@tailcall]) st vers
			)

and yy4 (st : state) (vers : semver list) : (semver list) option =
	let yych = Bytes.get st.buf st.cur in
	match yych with
		| '0'..'9' ->
			st.yyt2 <- st.cur;
			st.cur <- st.cur + 1;
			(yy7 [@tailcall]) st vers
		| _ ->
			if (st.cur >= st.lim) then (
				if (fill st = Ok) then (yy4 [@tailcall]) st vers
				else (yy5 [@tailcall]) st vers
			) else (
				(yy5 [@tailcall]) st vers
			)

and yy5 (st : state) (vers : semver list) : (semver list) option =
	st.cur <- st.mar;
	(yy2 [@tailcall]) st vers

and yy6 (st : state) (vers : semver list) : (semver list) option =
	let yych = Bytes.get st.buf st.cur in
	match yych with
		| '.' ->
			st.cur <- st.cur + 1;
			(yy4 [@tailcall]) st vers
		| '0'..'9' ->
			st.cur <- st.cur + 1;
			(yy6 [@tailcall]) st vers
		| _ ->
			if (st.cur >= st.lim) then (
				if (fill st = Ok) then (yy6 [@tailcall]) st vers
				else (yy5 [@tailcall]) st vers
			) else (
				(yy5 [@tailcall]) st vers
			)

and yy7 (st : state) (vers : semver list) : (semver list) option =
	let yych = Bytes.get st.buf st.cur in
	match yych with
		| '\n' ->
			st.yyt3 <- st.cur;
			st.yyt4 <- none;
			st.cur <- st.cur + 1;
			(yy8 [@tailcall]) st vers
		| '.' ->
			st.yyt3 <- st.cur;
			st.cur <- st.cur + 1;
			(yy9 [@tailcall]) st vers
		| '0'..'9' ->
			st.cur <- st.cur + 1;
			(yy7 [@tailcall]) st vers
		| _ ->
			if (st.cur >= st.lim) then (
				if (fill st = Ok) then (yy7 [@tailcall]) st vers
				else (yy5 [@tailcall]) st vers
			) else (
				(yy5 [@tailcall]) st vers
			)

and yy8 (st : state) (vers : semver list) : (semver list) option =
	st.t1 <- st.yyt1;
	st.t3 <- st.yyt2;
	st.t4 <- st.yyt3;
	st.t5 <- st.yyt4;
	st.t2 <- st.yyt2;
	st.t2 <- st.t2 + -1;
#76 "ocaml/submatch/01_stags_fill.re"
	
        let ver = {
            major = s2n st.buf st.t1 st.t2;
            minor = s2n st.buf st.t3 st.t4;
            patch = if st.t5 = none then 0 else s2n st.buf st.t5 (st.cur - 1)
        } in lex_loop st (ver :: vers)

#195 "ocaml/submatch/01_stags_fill.ml"

and yy9 (st : state) (vers : semver list) : (semver list) option =
	let yych = Bytes.get st.buf st.cur in
	match yych with
		| '0'..'9' ->
			st.yyt4 <- st.cur;
			st.cur <- st.cur + 1;
			(yy10 [@tailcall]) st vers
		| _ ->
			if (st.cur >= st.lim) then (
				if (fill st = Ok) then (yy9 [@tailcall]) st vers
				else (yy5 [@tailcall]) st vers
			) else (
				(yy5 [@tailcall]) st vers
			)

and yy10 (st : state) (vers : semver list) : (semver list) option =
	let yych = Bytes.get st.buf st.cur in
	match yych with
		| '\n' ->
			st.cur <- st.cur + 1;
			(yy8 [@tailcall]) st vers
		| '0'..'9' ->
			st.cur <- st.cur + 1;
			(yy10 [@tailcall]) st vers
		| _ ->
			if (st.cur >= st.lim) then (
				if (fill st = Ok) then (yy10 [@tailcall]) st vers
				else (yy5 [@tailcall]) st vers
			) else (
				(yy5 [@tailcall]) st vers
			)

and yy11 (st : state) (vers : semver list) : (semver list) option =
#83 "ocaml/submatch/01_stags_fill.re"
	Some (List.rev vers)
#232 "ocaml/submatch/01_stags_fill.ml"

and lex (st : state) (vers : semver list) : (semver list) option =
	(yy0 [@tailcall]) st vers

#85 "ocaml/submatch/01_stags_fill.re"


and lex_loop st vers =
    st.tok <- st.cur;
    lex st vers

let main () =
    let fname = "input" in

    (* Prepare input file. *)
    Out_channel.with_open_bin fname
        (fun oc -> for i = 1 to bufsize do
            output_string oc "1.22.333\n"
        done);

    (* Construct the expected result to compare against. *)
    let expect = Some (List.init bufsize
            (fun _ -> {major = 1; minor = 22; patch = 333;})) in

    (* Run lexer on the prepared file. *)
    In_channel.with_open_bin fname
        (fun ic ->
            let lim = bufsize - 1 in
            let st = {
                file = ic;
                buf = Bytes.create bufsize;
                cur = lim;
                mar = lim;
                tok = lim;
                lim = lim;
                eof = false;
                t1 = none;
                t2 = none;
                t3 = none;
                t4 = none;
                t5 = none;
                
#275 "ocaml/submatch/01_stags_fill.ml"

		yyt1 = none;
		yyt2 = none;
		yyt3 = none;
		yyt4 = none;
#121 "ocaml/submatch/01_stags_fill.re"

            } in if (lex_loop st [] <> expect) then
                raise (Failure "error"));

    (* Cleanup. *)
    Sys.remove fname

let _ = main ()
